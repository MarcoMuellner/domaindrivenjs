import{_ as o,c,a as l,d as a,b as p,e as s,w as t,r as i,o as r}from"./app-DtZquNiu.js";const u={};function d(k,n){const e=i("RouteLink");return r(),c("div",null,[n[8]||(n[8]=l(`<h1 id="working-with-domain-events" tabindex="-1"><a class="header-anchor" href="#working-with-domain-events"><span>Working with Domain Events</span></a></h1><p>When something significant happens in your domain that other parts of your system should know about, you need a way to communicate that occurrence. Domain events solve this problem elegantly by representing these important happenings as first-class objects in your code.</p><h2 id="what-are-domain-events" tabindex="-1"><a class="header-anchor" href="#what-are-domain-events"><span>What are Domain Events?</span></a></h2><p>A domain event is an immutable object that represents something meaningful that has happened in your domain. They are always named in past tense (e.g., <code>OrderPlaced</code>, <code>PaymentReceived</code>) because they describe something that has already occurred.</p><div class="hint-container tip"><p class="hint-container-title">Real-world Analogy</p><p>Think of a newspaper. When something significant happens in the world, a newspaper publishes the story. It doesn&#39;t directly tell each reader what happened—it simply publishes the news with all the relevant details, and interested readers can consume that information and react to it in their own way. Similarly, domain events announce that something important happened in your application, carrying all the relevant data about that occurrence, and interested components can subscribe to and react to these events without the source needing to know who&#39;s listening.</p></div><h3 id="key-characteristics" tabindex="-1"><a class="header-anchor" href="#key-characteristics"><span>Key Characteristics</span></a></h3><ul><li><strong>Named in past tense</strong> - Events describe something that has already happened</li><li><strong>Immutable</strong> - Once created, events cannot be modified</li><li><strong>Self-contained</strong> - Include all relevant data about what happened</li><li><strong>Timestamped</strong> - Record when the event occurred</li><li><strong>Identifiable</strong> - Can be uniquely identified (often with the source aggregate ID)</li><li><strong>Observable</strong> - Can be subscribed to by interested parties</li></ul><h3 id="real-world-analogies" tabindex="-1"><a class="header-anchor" href="#real-world-analogies"><span>Real-world Analogies</span></a></h3><p>Consider these everyday examples:</p><ul><li>A wedding announcement (event: <code>PersonMarried</code>)</li><li>A birth announcement (event: <code>BabyBorn</code>)</li><li>A store receipt (event: <code>PurchaseCompleted</code>)</li><li>A graduation notification (event: <code>DegreeAwarded</code>)</li></ul><p>Each represents something meaningful that happened, carries important information about the occurrence, and is sent to interested parties.</p><h2 id="why-use-domain-events" tabindex="-1"><a class="header-anchor" href="#why-use-domain-events"><span>Why Use Domain Events?</span></a></h2><p>Domain events offer several powerful benefits for your architecture:</p><h3 id="_1-decoupling-components" tabindex="-1"><a class="header-anchor" href="#_1-decoupling-components"><span>1. Decoupling Components</span></a></h3><div class="hint-container tip"><p class="hint-container-title">Real-world Analogy</p><p>Think of how a fire alarm works. The alarm doesn&#39;t know who will respond—it could be residents evacuating, the fire department coming, or security guards checking the situation. The alarm just signals that fire was detected, and the appropriate parties react based on their responsibilities. This is exactly how domain events create loose coupling in your system.</p></div><p>Events create loose coupling between parts of your system. The component that emits an event doesn&#39;t need to know who&#39;s listening or what they&#39;ll do with the information.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">Without events:</span>
<span class="line">Order → Direct call → Inventory → Direct call → Notification → Direct call → Analytics</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">With events:</span>
<span class="line">Order → OrderPlaced Event → [Inventory, Notification, Analytics] (subscribe independently)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-capturing-business-significance" tabindex="-1"><a class="header-anchor" href="#_2-capturing-business-significance"><span>2. Capturing Business Significance</span></a></h3><p>Events make important business activities explicit in your code:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// Without events - just internal state changes</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">placeOrder</span><span class="token punctuation">(</span><span class="token parameter">order</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  order<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token string">&#39;PLACED&#39;</span><span class="token punctuation">;</span></span>
<span class="line">  order<span class="token punctuation">.</span>placedAt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">save</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// With events - capturing business significance</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">placeOrder</span><span class="token punctuation">(</span><span class="token parameter">order</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> placedOrder <span class="token operator">=</span> order<span class="token punctuation">.</span><span class="token function">place</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Returns updated order and attaches event</span></span>
<span class="line">  <span class="token function">save</span><span class="token punctuation">(</span>placedOrder<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Saves and publishes the event</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-enabling-distributed-systems" tabindex="-1"><a class="header-anchor" href="#_3-enabling-distributed-systems"><span>3. Enabling Distributed Systems</span></a></h3><p>Events facilitate communication between separate services or bounded contexts:</p><h3 id="_4-supporting-audit-and-history" tabindex="-1"><a class="header-anchor" href="#_4-supporting-audit-and-history"><span>4. Supporting Audit and History</span></a></h3><p>Events create a natural audit trail of system activity:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">10:15:32 - UserRegistered { userId: &quot;user-123&quot;, email: &quot;user@example.com&quot; }</span>
<span class="line">10:16:05 - OrderPlaced { orderId: &quot;order-456&quot;, userId: &quot;user-123&quot;, items: [...] }</span>
<span class="line">10:16:12 - PaymentReceived { orderId: &quot;order-456&quot;, amount: 59.99 }</span>
<span class="line">10:16:15 - OrderShipped { orderId: &quot;order-456&quot;, trackingNumber: &quot;TN123456&quot; }</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-enabling-event-sourcing" tabindex="-1"><a class="header-anchor" href="#_5-enabling-event-sourcing"><span>5. Enabling Event Sourcing</span></a></h3><p>Events can serve as the primary source of truth in your system, with the current state derived from the event history (more on this later).</p><h2 id="creating-domain-events-with-domaindrivenjs" tabindex="-1"><a class="header-anchor" href="#creating-domain-events-with-domaindrivenjs"><span>Creating Domain Events with DomainDrivenJS</span></a></h2><p>DomainDrivenJS makes it easy to create and use domain events:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> z <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;zod&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> domainEvent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;domaindrivenjs&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Define our event</span></span>
<span class="line"><span class="token keyword">const</span> OrderPlaced <span class="token operator">=</span> <span class="token function">domainEvent</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;OrderPlaced&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">schema</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">orderId</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">customerId</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">totalAmount</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">positive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">items</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span>z<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">productId</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">quantity</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">positive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">unitPrice</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">positive</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">placedAt</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Create an event instance</span></span>
<span class="line"><span class="token keyword">const</span> event <span class="token operator">=</span> OrderPlaced<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">orderId</span><span class="token operator">:</span> <span class="token string">&#39;order-123&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">customerId</span><span class="token operator">:</span> <span class="token string">&#39;cust-456&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">totalAmount</span><span class="token operator">:</span> <span class="token number">99.99</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token literal-property property">productId</span><span class="token operator">:</span> <span class="token string">&#39;prod-789&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">quantity</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">unitPrice</span><span class="token operator">:</span> <span class="token number">49.99</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">placedAt</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Let&#39;s break down the components:</p><ol><li><strong><code>name</code></strong>: A descriptive name for your event (always past tense)</li><li><strong><code>schema</code></strong>: A Zod schema that defines the data structure and validation rules</li><li><strong><code>create</code></strong>: Factory method to create a validated event instance</li></ol><h2 id="the-event-lifecycle" tabindex="-1"><a class="header-anchor" href="#the-event-lifecycle"><span>The Event Lifecycle</span></a></h2><p>Domain events typically follow this lifecycle:</p><h3 id="_1-creation" tabindex="-1"><a class="header-anchor" href="#_1-creation"><span>1. Creation</span></a></h3><p>An event is created when something significant happens, typically within an aggregate:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> Order <span class="token operator">=</span> <span class="token function">aggregate</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line">  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">place</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">!==</span> <span class="token string">&#39;DRAFT&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Cannot place an order with status: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>status<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      </span>
<span class="line">      <span class="token keyword">return</span> Order<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> </span>
<span class="line">        <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token string">&#39;PLACED&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">placedAt</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">emitEvent</span><span class="token punctuation">(</span>OrderPlaced<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">orderId</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">customerId</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>customerId<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">totalAmount</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTotalAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">placedAt</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>.emitEvent()</code> method attaches the event to the aggregate but doesn&#39;t publish it yet.</p><h3 id="_2-publication" tabindex="-1"><a class="header-anchor" href="#_2-publication"><span>2. Publication</span></a></h3><p>Events are typically published when an aggregate is saved to a repository:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// Events are published when the aggregate is saved</span></span>
<span class="line"><span class="token keyword">await</span> orderRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">place</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-distribution" tabindex="-1"><a class="header-anchor" href="#_3-distribution"><span>3. Distribution</span></a></h3><p>The event bus distributes events to all interested subscribers:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> eventBus <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;domaindrivenjs&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Set up event handling</span></span>
<span class="line">eventBus<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>OrderPlaced<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Order </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>event<span class="token punctuation">.</span>orderId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> was placed at </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>event<span class="token punctuation">.</span>placedAt<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line">  <span class="token comment">// Handle the event by updating inventory</span></span>
<span class="line">  <span class="token keyword">await</span> inventoryService<span class="token punctuation">.</span><span class="token function">reserveItems</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>items<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Set up another handler for the same event</span></span>
<span class="line">eventBus<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>OrderPlaced<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Send confirmation email</span></span>
<span class="line">  <span class="token keyword">await</span> emailService<span class="token punctuation">.</span><span class="token function">sendOrderConfirmation</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>customerId<span class="token punctuation">,</span> event<span class="token punctuation">.</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-processing" tabindex="-1"><a class="header-anchor" href="#_4-processing"><span>4. Processing</span></a></h3><p>Each handler processes the event according to its responsibility:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// Inventory handler</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">handleOrderPlaced</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> event<span class="token punctuation">.</span>items<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">await</span> inventoryRepository<span class="token punctuation">.</span><span class="token function">reserveItem</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>productId<span class="token punctuation">,</span> item<span class="token punctuation">.</span>quantity<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Notification handler</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">handleOrderPlaced</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> customer <span class="token operator">=</span> <span class="token keyword">await</span> customerRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>customerId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">await</span> notificationService<span class="token punctuation">.</span><span class="token function">sendEmail</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">to</span><span class="token operator">:</span> customer<span class="token punctuation">.</span>email<span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">subject</span><span class="token operator">:</span> <span class="token string">&#39;Your order has been placed&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Thank you for your order #</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>event<span class="token punctuation">.</span>orderId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="the-event-bus" tabindex="-1"><a class="header-anchor" href="#the-event-bus"><span>The Event Bus</span></a></h2><p>The event bus is central to working with domain events, providing a publish-subscribe mechanism:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> eventBus <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;domaindrivenjs&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Subscribe to an event (using event factory)</span></span>
<span class="line">eventBus<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>OrderPlaced<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Handle event</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Subscribe to an event (using event name as string)</span></span>
<span class="line">eventBus<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;OrderPlaced&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Handle event</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Subscribe once (handler will be removed after first execution)</span></span>
<span class="line">eventBus<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span>OrderPlaced<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Handle event once</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Manually publish an event</span></span>
<span class="line"><span class="token keyword">await</span> eventBus<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span>OrderPlaced<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">orderId</span><span class="token operator">:</span> <span class="token string">&#39;order-123&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// other data...</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Publish multiple events</span></span>
<span class="line"><span class="token keyword">await</span> eventBus<span class="token punctuation">.</span><span class="token function">publishAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">  OrderPlaced<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment">/* data */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  PaymentReceived<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment">/* data */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="custom-event-bus-adapters" tabindex="-1"><a class="header-anchor" href="#custom-event-bus-adapters"><span>Custom Event Bus Adapters</span></a></h3><p>You can create custom event bus adapters for different messaging systems:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> createEventBus <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;domaindrivenjs&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Create a custom adapter for RabbitMQ (example)</span></span>
<span class="line"><span class="token keyword">const</span> rabbitMQAdapter <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">async</span> <span class="token function">publish</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">await</span> rabbitConnection<span class="token punctuation">.</span><span class="token function">sendToQueue</span><span class="token punctuation">(</span></span>
<span class="line">      <span class="token string">&#39;domain-events&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  </span>
<span class="line">  <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">eventType<span class="token punctuation">,</span> handler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Set up subscription using RabbitMQ</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">consumer</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>content<span class="token punctuation">.</span>type <span class="token operator">===</span> eventType<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">await</span> <span class="token function">handler</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        channel<span class="token punctuation">.</span><span class="token function">ack</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    channel<span class="token punctuation">.</span><span class="token function">consume</span><span class="token punctuation">(</span><span class="token string">&#39;domain-events&#39;</span><span class="token punctuation">,</span> consumer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// Return function to unsubscribe</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> channel<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span>consumer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Create event bus with custom adapter</span></span>
<span class="line"><span class="token keyword">const</span> messagingEventBus <span class="token operator">=</span> <span class="token function">createEventBus</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">adapter</span><span class="token operator">:</span> rabbitMQAdapter</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Or set adapter on existing event bus</span></span>
<span class="line">eventBus<span class="token punctuation">.</span><span class="token function">setAdapter</span><span class="token punctuation">(</span>rabbitMQAdapter<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="working-with-aggregates-and-events" tabindex="-1"><a class="header-anchor" href="#working-with-aggregates-and-events"><span>Working with Aggregates and Events</span></a></h2><p>DomainDrivenJS provides a seamless integration between aggregates and domain events:</p><h3 id="emitting-events" tabindex="-1"><a class="header-anchor" href="#emitting-events"><span>Emitting Events</span></a></h3><p>Aggregates can emit events when significant state changes occur:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> Order <span class="token operator">=</span> <span class="token function">aggregate</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line">  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">place</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// Validation, state changes...</span></span>
<span class="line">      </span>
<span class="line">      <span class="token keyword">return</span> Order<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token string">&#39;PLACED&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">placedAt</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">emitEvent</span><span class="token punctuation">(</span>OrderPlaced<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">orderId</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">customerId</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>customerId<span class="token punctuation">,</span></span>
<span class="line">        <span class="token comment">// other event data...</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// Validation, state changes...</span></span>
<span class="line">      </span>
<span class="line">      <span class="token keyword">return</span> Order<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token string">&#39;CANCELLED&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">cancelledAt</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">emitEvent</span><span class="token punctuation">(</span>OrderCancelled<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">orderId</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span></span>
<span class="line">        reason<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">cancelledAt</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="getting-and-clearing-events" tabindex="-1"><a class="header-anchor" href="#getting-and-clearing-events"><span>Getting and Clearing Events</span></a></h3><p>Events attached to an aggregate can be accessed and cleared:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// Place order (attaches an event)</span></span>
<span class="line"><span class="token keyword">const</span> placedOrder <span class="token operator">=</span> order<span class="token punctuation">.</span><span class="token function">place</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Get all events from the aggregate</span></span>
<span class="line"><span class="token keyword">const</span> events <span class="token operator">=</span> placedOrder<span class="token punctuation">.</span><span class="token function">getDomainEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>events<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [OrderPlaced event]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Clear events from the aggregate</span></span>
<span class="line"><span class="token keyword">const</span> clearedOrder <span class="token operator">=</span> placedOrder<span class="token punctuation">.</span><span class="token function">clearDomainEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>clearedOrder<span class="token punctuation">.</span><span class="token function">getDomainEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// []</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="automatic-publishing-with-repositories" tabindex="-1"><a class="header-anchor" href="#automatic-publishing-with-repositories"><span>Automatic Publishing with Repositories</span></a></h3><p>Repositories can automatically publish events when an aggregate is saved:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> OrderRepository <span class="token operator">=</span> <span class="token function">repository</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">aggregate</span><span class="token operator">:</span> Order<span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">adapter</span><span class="token operator">:</span> <span class="token function">createMongoAdapter</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">collectionName</span><span class="token operator">:</span> <span class="token string">&#39;orders&#39;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">events</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">publishOnSave</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// Auto-publish events when saving</span></span>
<span class="line">    <span class="token literal-property property">clearAfterPublish</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// Clear events after publishing</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// When we save the order, events are automatically published</span></span>
<span class="line"><span class="token keyword">await</span> OrderRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">place</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="event-patterns-and-best-practices" tabindex="-1"><a class="header-anchor" href="#event-patterns-and-best-practices"><span>Event Patterns and Best Practices</span></a></h2><h3 id="event-naming" tabindex="-1"><a class="header-anchor" href="#event-naming"><span>Event Naming</span></a></h3><p>Follow these naming conventions for clarity:</p><table><thead><tr><th>Guideline</th><th>Good Examples</th><th>Poor Examples</th></tr></thead><tbody><tr><td>Use past tense</td><td>OrderPlaced, PaymentReceived</td><td>PlaceOrder, ReceivePayment</td></tr><tr><td>Be specific</td><td>CustomerAddressChanged</td><td>CustomerUpdated</td></tr><tr><td>Focus on business significance</td><td>StockDepleted</td><td>StockChanged</td></tr><tr><td>Use domain terminology</td><td>ShipmentDispatched</td><td>BoxSent</td></tr></tbody></table><h3 id="event-content" tabindex="-1"><a class="header-anchor" href="#event-content"><span>Event Content</span></a></h3><p>Design your event content carefully:</p><ol><li><strong>Include all necessary context</strong> - Events should be self-contained</li><li><strong>Use identifiers, not full objects</strong> - Include IDs, not nested objects</li><li><strong>Include a timestamp</strong> - When did this happen?</li><li><strong>Consider versioning information</strong> - For event evolution</li><li><strong>Keep events focused</strong> - One event per significant occurrence</li></ol><p>Example of well-designed event content:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">OrderShipped <span class="token operator">=</span> <span class="token function">domainEvent</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;OrderShipped&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">schema</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">orderId</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">shippedAt</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">trackingNumber</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">carrier</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">estimatedDelivery</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">items</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span>z<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">productId</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">quantity</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">positive</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">version</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token string">&#39;1.0&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="event-patterns" tabindex="-1"><a class="header-anchor" href="#event-patterns"><span>Event Patterns</span></a></h3><h4 id="notification-events" tabindex="-1"><a class="header-anchor" href="#notification-events"><span>Notification Events</span></a></h4><p>Simple notifications about something that happened:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// Just notify interested parties</span></span>
<span class="line">UserLoggedIn<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">userId</span><span class="token operator">:</span> <span class="token string">&#39;user-123&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">timestamp</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">ipAddress</span><span class="token operator">:</span> <span class="token string">&#39;192.168.1.1&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="state-change-events" tabindex="-1"><a class="header-anchor" href="#state-change-events"><span>State Change Events</span></a></h4><p>Capturing changes to domain objects:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// Before and after state</span></span>
<span class="line">CustomerProfileUpdated<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">customerId</span><span class="token operator">:</span> <span class="token string">&#39;cust-123&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">changes</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">previousEmail</span><span class="token operator">:</span> <span class="token string">&#39;old@example.com&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">newEmail</span><span class="token operator">:</span> <span class="token string">&#39;new@example.com&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">updatedAt</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="domain-significant-events" tabindex="-1"><a class="header-anchor" href="#domain-significant-events"><span>Domain Significant Events</span></a></h4><p>Representing important domain activities:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// Business significance</span></span>
<span class="line">LowStockDetected<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">productId</span><span class="token operator">:</span> <span class="token string">&#39;prod-123&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">currentQuantity</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">thresholdQuantity</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">warehouseId</span><span class="token operator">:</span> <span class="token string">&#39;warehouse-1&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">detectedAt</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="domain-events-vs-integration-events" tabindex="-1"><a class="header-anchor" href="#domain-events-vs-integration-events"><span>Domain Events vs. Integration Events</span></a></h3><p>It&#39;s important to distinguish between different types of events:</p><table><thead><tr><th>Type</th><th>Purpose</th><th>Scope</th><th>Examples</th></tr></thead><tbody><tr><td><strong>Domain Events</strong></td><td>Capture domain changes</td><td>Within a bounded context</td><td>OrderPlaced, InventoryReduced</td></tr><tr><td><strong>Integration Events</strong></td><td>Communication between contexts</td><td>Across bounded contexts</td><td>OrderPlacedIntegration, PaymentProcessedIntegration</td></tr></tbody></table><p>Integration events typically contain less information and are designed for cross-context communication:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// Domain event (rich, internal)</span></span>
<span class="line">OrderPlaced<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">orderId</span><span class="token operator">:</span> <span class="token string">&#39;order-123&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">customerId</span><span class="token operator">:</span> <span class="token string">&#39;cust-456&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token comment">/* detailed item information */</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">appliedPromotions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token comment">/* promotion details */</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">customerNotes</span><span class="token operator">:</span> <span class="token string">&#39;Please leave at the door&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">placedAt</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Integration event (streamlined, external)</span></span>
<span class="line">OrderPlacedIntegration<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">orderId</span><span class="token operator">:</span> <span class="token string">&#39;order-123&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">customerId</span><span class="token operator">:</span> <span class="token string">&#39;cust-456&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">totalAmount</span><span class="token operator">:</span> <span class="token number">99.99</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">itemCount</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">placedAt</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="event-sourcing" tabindex="-1"><a class="header-anchor" href="#event-sourcing"><span>Event Sourcing</span></a></h2><div class="hint-container tip"><p class="hint-container-title">Real-world Analogy</p><p>Think of a basketball game&#39;s scoreboard versus the play-by-play record. The scoreboard shows the current state (final score 88-82), but the play-by-play log shows every basket, foul, and timeout that led to that score. If there&#39;s ever a dispute, you can replay the log to verify the score. Event sourcing works the same way—storing every significant action rather than just the final result.</p></div><p>Event sourcing is a powerful pattern where events become the primary source of truth, with the current state derived from the event history.</p><h3 id="basic-concept" tabindex="-1"><a class="header-anchor" href="#basic-concept"><span>Basic Concept</span></a></h3><p>Instead of storing the current state, you store a sequence of events that led to that state:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">Traditional: Save current order state (Order with status = &quot;SHIPPED&quot;)</span>
<span class="line"></span>
<span class="line">Event Sourced: </span>
<span class="line">1. OrderCreated {...}</span>
<span class="line">2. ProductAdded {...}</span>
<span class="line">3. OrderPlaced {...}</span>
<span class="line">4. PaymentReceived {...}</span>
<span class="line">5. OrderShipped {...}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The current state is rebuilt by replaying these events in sequence.</p><h3 id="implementing-event-sourcing-with-domaindrivenjs" tabindex="-1"><a class="header-anchor" href="#implementing-event-sourcing-with-domaindrivenjs"><span>Implementing Event Sourcing with DomainDrivenJS</span></a></h3><p>DomainDrivenJS supports event sourcing with the <code>EventSourcedAggregate</code> pattern:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> EventSourcedAggregate <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;domaindrivenjs&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Create an event-sourced aggregate</span></span>
<span class="line"><span class="token keyword">const</span> EventSourcedOrder <span class="token operator">=</span> <span class="token function">EventSourcedAggregate</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Order&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">events</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Define events and their impact on state</span></span>
<span class="line">    <span class="token literal-property property">OrderCreated</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">schema</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">customerId</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">createdAt</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token function-variable function">apply</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token operator">...</span>state<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">customerId</span><span class="token operator">:</span> event<span class="token punctuation">.</span>customerId<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token string">&#39;DRAFT&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">total</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">createdAt</span><span class="token operator">:</span> event<span class="token punctuation">.</span>createdAt<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">updatedAt</span><span class="token operator">:</span> event<span class="token punctuation">.</span>createdAt</span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    </span>
<span class="line">    <span class="token literal-property property">ProductAdded</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">schema</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">productId</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">productName</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">quantity</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">positive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">unitPrice</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">positive</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token function-variable function">apply</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> newItem <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token literal-property property">productId</span><span class="token operator">:</span> event<span class="token punctuation">.</span>productId<span class="token punctuation">,</span></span>
<span class="line">          <span class="token literal-property property">productName</span><span class="token operator">:</span> event<span class="token punctuation">.</span>productName<span class="token punctuation">,</span></span>
<span class="line">          <span class="token literal-property property">quantity</span><span class="token operator">:</span> event<span class="token punctuation">.</span>quantity<span class="token punctuation">,</span></span>
<span class="line">          <span class="token literal-property property">unitPrice</span><span class="token operator">:</span> event<span class="token punctuation">.</span>unitPrice</span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// Check if product already exists in order</span></span>
<span class="line">        <span class="token keyword">const</span> existingItemIndex <span class="token operator">=</span> state<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span></span>
<span class="line">          <span class="token parameter">item</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>productId <span class="token operator">===</span> event<span class="token punctuation">.</span>productId</span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">let</span> updatedItems<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>existingItemIndex <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token comment">// Update quantity of existing item</span></span>
<span class="line">          <span class="token keyword">const</span> existingItem <span class="token operator">=</span> state<span class="token punctuation">.</span>items<span class="token punctuation">[</span>existingItemIndex<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token keyword">const</span> updatedItem <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token operator">...</span>existingItem<span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">quantity</span><span class="token operator">:</span> existingItem<span class="token punctuation">.</span>quantity <span class="token operator">+</span> event<span class="token punctuation">.</span>quantity</span>
<span class="line">          <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">          </span>
<span class="line">          updatedItems <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">            <span class="token operator">...</span>state<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> existingItemIndex<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            updatedItem<span class="token punctuation">,</span></span>
<span class="line">            <span class="token operator">...</span>state<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>existingItemIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">          <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token comment">// Add new item</span></span>
<span class="line">          updatedItems <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>state<span class="token punctuation">.</span>items<span class="token punctuation">,</span> newItem<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// Calculate new total</span></span>
<span class="line">        <span class="token keyword">const</span> newTotal <span class="token operator">=</span> updatedItems<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span></span>
<span class="line">          <span class="token punctuation">(</span><span class="token parameter">sum<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> sum <span class="token operator">+</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>quantity <span class="token operator">*</span> item<span class="token punctuation">.</span>unitPrice<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token number">0</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token operator">...</span>state<span class="token punctuation">,</span></span>
<span class="line">          <span class="token literal-property property">items</span><span class="token operator">:</span> updatedItems<span class="token punctuation">,</span></span>
<span class="line">          <span class="token literal-property property">total</span><span class="token operator">:</span> newTotal<span class="token punctuation">,</span></span>
<span class="line">          <span class="token literal-property property">updatedAt</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    </span>
<span class="line">    <span class="token literal-property property">OrderPlaced</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">schema</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">placedAt</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token function-variable function">apply</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token operator">...</span>state<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token string">&#39;PLACED&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">placedAt</span><span class="token operator">:</span> event<span class="token punctuation">.</span>placedAt<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">updatedAt</span><span class="token operator">:</span> event<span class="token punctuation">.</span>placedAt</span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// More event handlers...</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  </span>
<span class="line">  <span class="token literal-property property">commands</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Commands trigger events</span></span>
<span class="line">    <span class="token function-variable function">createOrder</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> <span class="token punctuation">{</span> customerId <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;OrderCreated&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">          customerId<span class="token punctuation">,</span></span>
<span class="line">          <span class="token literal-property property">createdAt</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function-variable function">addProduct</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> <span class="token punctuation">{</span> product<span class="token punctuation">,</span> quantity <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span>status <span class="token operator">!==</span> <span class="token string">&#39;DRAFT&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Cannot add products to a non-draft order&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      </span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">          <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;ProductAdded&#39;</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token literal-property property">productId</span><span class="token operator">:</span> product<span class="token punctuation">.</span>id<span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">productName</span><span class="token operator">:</span> product<span class="token punctuation">.</span>name<span class="token punctuation">,</span></span>
<span class="line">            quantity<span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">unitPrice</span><span class="token operator">:</span> product<span class="token punctuation">.</span>price</span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function-variable function">placeOrder</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span>status <span class="token operator">!==</span> <span class="token string">&#39;DRAFT&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Cannot place an order that is not in draft status&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      </span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span>items<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Cannot place an empty order&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      </span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">          <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;OrderPlaced&#39;</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token literal-property property">placedAt</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="working-with-event-sourced-aggregates" tabindex="-1"><a class="header-anchor" href="#working-with-event-sourced-aggregates"><span>Working with Event-Sourced Aggregates</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// Create a new order by issuing commands that generate events</span></span>
<span class="line"><span class="token keyword">let</span> order <span class="token operator">=</span> <span class="token keyword">await</span> orderRepository<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span><span class="token string">&#39;order-123&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>order<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  order <span class="token operator">=</span> EventSourcedOrder<span class="token punctuation">.</span><span class="token function">createNew</span><span class="token punctuation">(</span><span class="token string">&#39;order-123&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line">  <span class="token comment">// Execute commands which produce events</span></span>
<span class="line">  order <span class="token operator">=</span> order<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">&#39;createOrder&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">customerId</span><span class="token operator">:</span> <span class="token string">&#39;cust-456&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  order <span class="token operator">=</span> order<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">&#39;addProduct&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> product<span class="token punctuation">,</span> <span class="token literal-property property">quantity</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  order <span class="token operator">=</span> order<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">&#39;placeOrder&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line">  <span class="token comment">// Save the events</span></span>
<span class="line">  <span class="token keyword">await</span> orderRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// When loading, the state is reconstructed from events</span></span>
<span class="line"><span class="token keyword">const</span> reconstitutedOrder <span class="token operator">=</span> <span class="token keyword">await</span> orderRepository<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span><span class="token string">&#39;order-123&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="snapshots-for-performance" tabindex="-1"><a class="header-anchor" href="#snapshots-for-performance"><span>Snapshots for Performance</span></a></h3><p>For performance with long event streams, snapshots store the current state at intervals:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// Load from snapshot and apply only newer events</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">loadOrderWithSnapshot</span><span class="token punctuation">(</span><span class="token parameter">orderId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Try to get a snapshot first</span></span>
<span class="line">  <span class="token keyword">const</span> snapshot <span class="token operator">=</span> <span class="token keyword">await</span> snapshotStore<span class="token punctuation">.</span><span class="token function">getLatestSnapshot</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line">  <span class="token comment">// Get events after the snapshot</span></span>
<span class="line">  <span class="token keyword">const</span> events <span class="token operator">=</span> <span class="token keyword">await</span> eventStore<span class="token punctuation">.</span><span class="token function">getEvents</span><span class="token punctuation">(</span></span>
<span class="line">    orderId<span class="token punctuation">,</span> </span>
<span class="line">    snapshot <span class="token operator">?</span> snapshot<span class="token punctuation">.</span>version <span class="token operator">:</span> <span class="token number">0</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line">  <span class="token comment">// Rebuild from snapshot or empty</span></span>
<span class="line">  <span class="token keyword">let</span> order<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>snapshot<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    order <span class="token operator">=</span> EventSourcedOrder<span class="token punctuation">.</span><span class="token function">fromSnapshot</span><span class="token punctuation">(</span>snapshot<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    order <span class="token operator">=</span> EventSourcedOrder<span class="token punctuation">.</span><span class="token function">createEmpty</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  </span>
<span class="line">  <span class="token comment">// Apply newer events to rebuild current state</span></span>
<span class="line">  <span class="token keyword">return</span> order<span class="token punctuation">.</span><span class="token function">applyEvents</span><span class="token punctuation">(</span>events<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Create snapshots periodically</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">createSnapshotIfNeeded</span><span class="token punctuation">(</span><span class="token parameter">order</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>order<span class="token punctuation">.</span>eventsSinceSnapshot <span class="token operator">&gt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    snapshotStore<span class="token punctuation">.</span><span class="token function">saveSnapshot</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">aggregateId</span><span class="token operator">:</span> order<span class="token punctuation">.</span>id<span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">version</span><span class="token operator">:</span> order<span class="token punctuation">.</span>version<span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">state</span><span class="token operator">:</span> order<span class="token punctuation">.</span>state<span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">timestamp</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="common-event-patterns" tabindex="-1"><a class="header-anchor" href="#common-event-patterns"><span>Common Event Patterns</span></a></h2><h3 id="event-notification" tabindex="-1"><a class="header-anchor" href="#event-notification"><span>Event Notification</span></a></h3><p>Simple notification of other components:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// Order service emits event</span></span>
<span class="line">orderAggregate<span class="token punctuation">.</span><span class="token function">place</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">emitEvent</span><span class="token punctuation">(</span>OrderPlaced<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Inventory service listens and acts</span></span>
<span class="line">eventBus<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>OrderPlaced<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">await</span> inventoryService<span class="token punctuation">.</span><span class="token function">reserveItems</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>items<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Notification service also listens and acts</span></span>
<span class="line">eventBus<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>OrderPlaced<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">await</span> emailService<span class="token punctuation">.</span><span class="token function">sendOrderConfirmation</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>customerId<span class="token punctuation">,</span> event<span class="token punctuation">.</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="event-carried-state-transfer" tabindex="-1"><a class="header-anchor" href="#event-carried-state-transfer"><span>Event-Carried State Transfer</span></a></h3><p>Use events to keep separate services in sync:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// Customer service emits events with changed data</span></span>
<span class="line">customerAggregate<span class="token punctuation">.</span><span class="token function">updateAddress</span><span class="token punctuation">(</span>newAddress<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">emitEvent</span><span class="token punctuation">(</span></span>
<span class="line">  CustomerAddressChanged<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">customerId</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span></span>
<span class="line">    newAddress<span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">changedAt</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Order service maintains its own copy of customer data</span></span>
<span class="line">eventBus<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>CustomerAddressChanged<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">await</span> orderService<span class="token punctuation">.</span><span class="token function">updateCustomerAddress</span><span class="token punctuation">(</span></span>
<span class="line">    event<span class="token punctuation">.</span>customerId<span class="token punctuation">,</span> </span>
<span class="line">    event<span class="token punctuation">.</span>newAddress</span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="event-sourcing-with-cqrs" tabindex="-1"><a class="header-anchor" href="#event-sourcing-with-cqrs"><span>Event Sourcing with CQRS</span></a></h3><p>Combining Event Sourcing with Command Query Responsibility Segregation:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">Commands → Command Handlers → Domain Events → Event Store</span>
<span class="line">                                    ↓</span>
<span class="line">                               Projections</span>
<span class="line">                                    ↓</span>
<span class="line">Queries ← Query Handlers ← Read Models (optimized for querying)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="event-versioning" tabindex="-1"><a class="header-anchor" href="#event-versioning"><span>Event Versioning</span></a></h3><p>As your events evolve, you may need versioning strategies:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// Version 1 of an event</span></span>
<span class="line"><span class="token keyword">const</span> OrderPlacedV1 <span class="token operator">=</span> <span class="token function">domainEvent</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;OrderPlaced&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">schema</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">orderId</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">customerId</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">totalAmount</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">placedAt</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">_version</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">literal</span><span class="token punctuation">(</span><span class="token string">&#39;1.0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token string">&#39;1.0&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Version 2 adds additional fields</span></span>
<span class="line"><span class="token keyword">const</span> OrderPlacedV2 <span class="token operator">=</span> <span class="token function">domainEvent</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;OrderPlaced&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">schema</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">orderId</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">customerId</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">totalAmount</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">items</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span>z<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// Added field</span></span>
<span class="line">    <span class="token literal-property property">shippingAddress</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// Added field</span></span>
<span class="line">    <span class="token literal-property property">placedAt</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">_version</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">literal</span><span class="token punctuation">(</span><span class="token string">&#39;2.0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token string">&#39;2.0&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Event handler that supports multiple versions</span></span>
<span class="line">eventBus<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;OrderPlaced&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>_version <span class="token operator">===</span> <span class="token string">&#39;1.0&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Handle v1 format</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>_version <span class="token operator">===</span> <span class="token string">&#39;2.0&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Handle v2 format</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Unknown version</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Unknown event version: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>event<span class="token punctuation">.</span>_version<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="troubleshooting-and-best-practices" tabindex="-1"><a class="header-anchor" href="#troubleshooting-and-best-practices"><span>Troubleshooting and Best Practices</span></a></h2><h3 id="common-issues" tabindex="-1"><a class="header-anchor" href="#common-issues"><span>Common Issues</span></a></h3><ol><li><p><strong>Missed Events</strong>: Events not being processed by certain handlers</p><ul><li>Use persistent messaging with retry mechanisms</li><li>Implement idempotent handlers that can safely reprocess events</li></ul></li><li><p><strong>Too Many Events</strong>: System performance degrades with high event volume</p><ul><li>Consider event filtering mechanisms</li><li>Use snapshots for event sourcing</li><li>Implement event pruning for old events</li></ul></li><li><p><strong>Inconsistent Processing Order</strong>: Events processed out of sequence</p><ul><li>Use sequence numbers or timestamps</li><li>Design handlers to be resilient to out-of-order events</li><li>Consider event batching or transaction boundaries</li></ul></li></ol><h3 id="best-practices" tabindex="-1"><a class="header-anchor" href="#best-practices"><span>Best Practices</span></a></h3><ol><li><p><strong>Design for Idempotence</strong>: Handlers should be able to process the same event multiple times without side effects</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// Idempotent handler using request ID for uniqueness</span></span>
<span class="line">eventBus<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>PaymentReceived<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Check if we&#39;ve already processed this event</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">await</span> processedEvents<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// Already processed, exit early</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  </span>
<span class="line">  <span class="token comment">// Process the payment</span></span>
<span class="line">  <span class="token keyword">await</span> <span class="token function">recordPayment</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>orderId<span class="token punctuation">,</span> event<span class="token punctuation">.</span>amount<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line">  <span class="token comment">// Mark as processed to ensure idempotence</span></span>
<span class="line">  <span class="token keyword">await</span> processedEvents<span class="token punctuation">.</span><span class="token function">record</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Include Essential Context</strong>: Events should contain all necessary information for handlers</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// Good: Contains all context needed</span></span>
<span class="line">OrderShipped<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">orderId</span><span class="token operator">:</span> <span class="token string">&#39;order-123&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">customerId</span><span class="token operator">:</span> <span class="token string">&#39;cust-456&#39;</span><span class="token punctuation">,</span> <span class="token comment">// Include for notifications</span></span>
<span class="line">  <span class="token literal-property property">trackingNumber</span><span class="token operator">:</span> <span class="token string">&#39;TN123456789&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">carrier</span><span class="token operator">:</span> <span class="token string">&#39;FedEx&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">estimatedDelivery</span><span class="token operator">:</span> estimatedDate<span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">shippedAt</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Bad: Missing essential context</span></span>
<span class="line">OrderShipped<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">orderId</span><span class="token operator">:</span> <span class="token string">&#39;order-123&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">trackingNumber</span><span class="token operator">:</span> <span class="token string">&#39;TN123456789&#39;</span></span>
<span class="line">  <span class="token comment">// Missing customer ID for notifications</span></span>
<span class="line">  <span class="token comment">// Missing carrier information</span></span>
<span class="line">  <span class="token comment">// Missing dates</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Handle Failures Gracefully</strong>: Implement resilient event handling</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">eventBus<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>OrderPlaced<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">await</span> inventoryService<span class="token punctuation">.</span><span class="token function">reserveItems</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>items<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Log the error</span></span>
<span class="line">    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Failed to reserve inventory for order </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>event<span class="token punctuation">.</span>orderId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// Record the failure for manual resolution</span></span>
<span class="line">    <span class="token keyword">await</span> failedEventQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">eventType</span><span class="token operator">:</span> <span class="token string">&#39;OrderPlaced&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">eventData</span><span class="token operator">:</span> event<span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">error</span><span class="token operator">:</span> error<span class="token punctuation">.</span>message<span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">timestamp</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// Optionally raise a system alert</span></span>
<span class="line">    <span class="token keyword">await</span> alertingService<span class="token punctuation">.</span><span class="token function">raiseAlert</span><span class="token punctuation">(</span></span>
<span class="line">      <span class="token string">&#39;INVENTORY_RESERVATION_FAILED&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Failed to reserve inventory for order </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>event<span class="token punctuation">.</span>orderId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Name Events Meaningfully</strong>: Use clear, past-tense verbs that reflect domain significance</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// Good: Clear and specific</span></span>
<span class="line">CustomerEmailVerified<span class="token punctuation">,</span> OrderShipped<span class="token punctuation">,</span> PaymentDeclined</span>
<span class="line"></span>
<span class="line"><span class="token comment">// Bad: Vague or present tense</span></span>
<span class="line">UpdateUser<span class="token punctuation">,</span> ProcessOrder<span class="token punctuation">,</span> HandlePayment</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Document Event Schema</strong>: Maintain clear documentation of your events</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * OrderPlaced - Emitted when a customer confirms their order</span>
<span class="line"> * </span>
<span class="line"> * Properties:</span>
<span class="line"> * - orderId: Unique identifier for the order</span>
<span class="line"> * - customerId: Customer who placed the order</span>
<span class="line"> * - totalAmount: Order total including taxes and shipping</span>
<span class="line"> * - items: Array of items ordered with quantities</span>
<span class="line"> * - placedAt: When the order was placed</span>
<span class="line"> * </span>
<span class="line"> * Consumers:</span>
<span class="line"> * - Inventory Service (reserves stock)</span>
<span class="line"> * - Notification Service (sends confirmation email)</span>
<span class="line"> * - Analytics Service (updates sales metrics)</span>
<span class="line"> */</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="next-steps" tabindex="-1"><a class="header-anchor" href="#next-steps"><span>Next Steps</span></a></h2><p>Now that you understand domain events, explore these related topics:</p>`,124)),a("ul",null,[a("li",null,[p(e,{to:"/guide/core/aggregates.html"},{default:t(()=>n[0]||(n[0]=[s("Aggregates")])),_:1}),n[1]||(n[1]=s(": Learn how aggregates emit domain events"))]),a("li",null,[p(e,{to:"/guide/core/repositories.html"},{default:t(()=>n[2]||(n[2]=[s("Repositories")])),_:1}),n[3]||(n[3]=s(": See how repositories publish events when saving aggregates"))]),a("li",null,[p(e,{to:"/guide/advanced/event-sourcing.html"},{default:t(()=>n[4]||(n[4]=[s("Event Sourcing")])),_:1}),n[5]||(n[5]=s(": Dive deeper into using events as your source of truth"))]),a("li",null,[p(e,{to:"/guide/advanced/cqrs.html"},{default:t(()=>n[6]||(n[6]=[s("CQRS")])),_:1}),n[7]||(n[7]=s(": Learn about separating read and write operations with events"))])]),n[9]||(n[9]=a("p",null,"By mastering domain events, you unlock powerful architectural patterns that lead to more maintainable, scalable, and loosely coupled systems.",-1))])}const m=o(u,[["render",d]]),b=JSON.parse('{"path":"/guide/core/domain-events.html","title":"Working with Domain Events","lang":"en-US","frontmatter":{},"git":{"updatedTime":1745314373000,"contributors":[{"name":"Marco Müllner","username":"","email":"muellnermarco@gmail.com","commits":1}],"changelog":[{"hash":"f33108869e46aede69a5ee16c04def52d302b17a","time":1745314373000,"email":"muellnermarco@gmail.com","author":"Marco Müllner","message":"feat: refactor method and operation definitions to use factory functions for improved flexibility"}]},"filePathRelative":"guide/core/domain-events.md"}');export{m as comp,b as data};
