import{_ as i,c,a as o,d as a,e as s,b as p,w as e,r as l,o as r}from"./app-DtZquNiu.js";const u={};function d(k,n){const t=l("RouteLink");return r(),c("div",null,[n[9]||(n[9]=o(`<h1 id="working-with-repositories" tabindex="-1"><a class="header-anchor" href="#working-with-repositories"><span>Working with Repositories</span></a></h1><p>Repositories are a critical pattern in Domain-Driven Design that provides a clean separation between your domain model and your data storage. They abstract away the details of how objects are persisted and retrieved.</p><h2 id="what-is-a-repository" tabindex="-1"><a class="header-anchor" href="#what-is-a-repository"><span>What is a Repository?</span></a></h2><p>A repository is a collection-like interface that mediates between the domain model and data mapping layers, providing an illusion of an in-memory collection of domain objects. Think of it as a specialized &quot;bookshelf&quot; where your domain objects are stored and retrieved.</p><div class="hint-container tip"><p class="hint-container-title">Real-world Analogy</p><p>Think of a library. When you want a book, you don&#39;t need to know how the library organizes its shelves, its cataloging system, or where specific books are physically located. You simply ask the librarian for a book by title or author. The librarian (the repository) handles all the details of finding, retrieving, and returning the book to its proper place. Similarly, repositories in code hide all the complex details of data storage and retrieval, allowing the rest of your application to work with domain objects directly without concerning itself with how or where they&#39;re stored.</p></div><p>Key characteristics:</p><ul><li>Provides a collection-like interface for accessing domain objects</li><li>Abstracts away data storage and retrieval mechanisms</li><li>Mediates between the domain and data mapping layers</li><li>Enables testability and flexibility in your domain model</li></ul><h2 id="why-use-repositories" tabindex="-1"><a class="header-anchor" href="#why-use-repositories"><span>Why Use Repositories?</span></a></h2><p>Repositories offer several benefits:</p><ul><li><strong>Separation of concerns</strong>: Your domain logic remains pure and focused, without being entangled with database access code</li><li><strong>Improved testability</strong>: Easily swap real storage with in-memory implementations for testing</li><li><strong>Simplified domain code</strong>: Domain logic works with repositories, not data access mechanisms</li><li><strong>Storage flexibility</strong>: Change database technologies without affecting domain code</li><li><strong>Query optimization</strong>: Repositories can optimize queries based on specific storage technologies</li><li><strong>Domain focus</strong>: Repositories speak the language of the domain, not the language of the database</li></ul><h2 id="how-repositories-work" tabindex="-1"><a class="header-anchor" href="#how-repositories-work"><span>How Repositories Work</span></a></h2><p>Repositories act as a boundary between two very different worlds:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">┌─────────────────────┐     ┌───────────────┐     ┌─────────────────────┐</span>
<span class="line">│                     │     │               │     │                     │</span>
<span class="line">│   Domain Model      │◄────┤  Repository   ├────►│   Data Storage      │</span>
<span class="line">│  (Entities, etc.)   │     │               │     │  (SQL, NoSQL, etc.) │</span>
<span class="line">│                     │     │               │     │                     │</span>
<span class="line">└─────────────────────┘     └───────────────┘     └─────────────────────┘</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>On one side, the repository accepts and returns domain objects (entities, aggregates). On the other side, it translates these into the data format required by your storage technology.</p><p>When a repository saves an object:</p><ol><li>It receives a domain object</li><li>It maps the object to the storage format (e.g., SQL table rows, document JSON)</li><li>It uses the appropriate storage mechanism to persist the data</li></ol><p>When a repository retrieves an object:</p><ol><li>It queries the storage mechanism</li><li>It maps the raw data back into domain objects</li><li>It returns fully reconstituted domain objects</li></ol><h2 id="creating-repositories-with-domaindrivenjs" tabindex="-1"><a class="header-anchor" href="#creating-repositories-with-domaindrivenjs"><span>Creating Repositories with DomainDrivenJS</span></a></h2><p>DomainDrivenJS provides a straightforward way to create repositories:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> z <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;zod&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> entity<span class="token punctuation">,</span> repository <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;domaindrivenjs&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// First, let&#39;s define a simple Product entity</span></span>
<span class="line"><span class="token keyword">const</span> Product <span class="token operator">=</span> <span class="token function">entity</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Product&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">schema</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">id</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">price</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">positive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">stockLevel</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nonnegative</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">identity</span><span class="token operator">:</span> <span class="token string">&#39;id&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Now, let&#39;s create a repository for our Product entity</span></span>
<span class="line"><span class="token keyword">const</span> ProductRepository <span class="token operator">=</span> <span class="token function">repository</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;ProductRepository&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">entity</span><span class="token operator">:</span> Product<span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">async</span> <span class="token function">findByName</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// This will be implemented by the adapter</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">async</span> <span class="token function">findInStock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// This will be implemented by the adapter</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findMany</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">stockLevel</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">$gt</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">async</span> <span class="token function">updateStock</span><span class="token punctuation">(</span><span class="token parameter">id<span class="token punctuation">,</span> newStockLevel</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// This will be implemented by the adapter</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">stockLevel</span><span class="token operator">:</span> newStockLevel <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Let&#39;s break down the components:</p><ol><li><strong><code>name</code></strong>: A descriptive name for your repository</li><li><strong><code>entity</code></strong>: The entity type this repository will manage</li><li><strong><code>methods</code></strong>: Custom query and operation methods specific to this repository</li></ol><h2 id="repository-adapters" tabindex="-1"><a class="header-anchor" href="#repository-adapters"><span>Repository Adapters</span></a></h2><div class="hint-container tip"><p class="hint-container-title">Real-world Analogy</p><p>Repository adapters are like power adapters for international travel. Whether you&#39;re in Europe, Asia, or America with different wall outlets, the adapter ensures your device gets the power it needs. Similarly, repository adapters ensure your domain objects work with different storage systems (MongoDB, SQL, memory) without changing your core code.</p></div><p>A key strength of the repository pattern is its abstraction of storage details through adapters. DomainDrivenJS provides adapters for different storage systems:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> InMemoryAdapter<span class="token punctuation">,</span> MongoAdapter<span class="token punctuation">,</span> SqliteAdapter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;domaindrivenjs/adapters&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// In-memory adapter (great for testing)</span></span>
<span class="line"><span class="token keyword">const</span> inMemoryProductRepo <span class="token operator">=</span> ProductRepository<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token keyword">new</span> <span class="token class-name">InMemoryAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// MongoDB adapter</span></span>
<span class="line"><span class="token keyword">const</span> mongoProductRepo <span class="token operator">=</span> ProductRepository<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token keyword">new</span> <span class="token class-name">MongoAdapter</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">connectionString</span><span class="token operator">:</span> <span class="token string">&#39;mongodb://localhost:27017&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">database</span><span class="token operator">:</span> <span class="token string">&#39;my-shop&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">collection</span><span class="token operator">:</span> <span class="token string">&#39;products&#39;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// SQLite adapter</span></span>
<span class="line"><span class="token keyword">const</span> sqliteProductRepo <span class="token operator">=</span> ProductRepository<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token keyword">new</span> <span class="token class-name">SqliteAdapter</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;./my-shop.db&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">table</span><span class="token operator">:</span> <span class="token string">&#39;products&#39;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Each adapter implements the same interface but handles the specific details of its storage technology. This allows you to switch storage technologies with minimal code changes.</p><h2 id="using-repositories" tabindex="-1"><a class="header-anchor" href="#using-repositories"><span>Using Repositories</span></a></h2><p>Once you&#39;ve connected your repository to an adapter, you can use it to work with your entities:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// Create a new product</span></span>
<span class="line"><span class="token keyword">const</span> newProduct <span class="token operator">=</span> <span class="token keyword">await</span> productRepo<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span></span>
<span class="line">  Product<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;123e4567-e89b-12d3-a456-426614174000&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Mechanical Keyboard&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token number">89.99</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">stockLevel</span><span class="token operator">:</span> <span class="token number">50</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Find a product by ID</span></span>
<span class="line"><span class="token keyword">const</span> product <span class="token operator">=</span> <span class="token keyword">await</span> productRepo<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token string">&#39;123e4567-e89b-12d3-a456-426614174000&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Find products by criteria</span></span>
<span class="line"><span class="token keyword">const</span> inStockProducts <span class="token operator">=</span> <span class="token keyword">await</span> productRepo<span class="token punctuation">.</span><span class="token function">findInStock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> keyboardProducts <span class="token operator">=</span> <span class="token keyword">await</span> productRepo<span class="token punctuation">.</span><span class="token function">findMany</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">$contains</span><span class="token operator">:</span> <span class="token string">&#39;Keyboard&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Update a product</span></span>
<span class="line"><span class="token keyword">await</span> productRepo<span class="token punctuation">.</span><span class="token function">updateStock</span><span class="token punctuation">(</span><span class="token string">&#39;123e4567-e89b-12d3-a456-426614174000&#39;</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Delete a product</span></span>
<span class="line"><span class="token keyword">await</span> productRepo<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&#39;123e4567-e89b-12d3-a456-426614174000&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="standard-repository-methods" tabindex="-1"><a class="header-anchor" href="#standard-repository-methods"><span>Standard Repository Methods</span></a></h2><div class="hint-container tip"><p class="hint-container-title">Real-world Analogy</p><p>Repository methods are like the standard services offered by a storage facility. You can store items (save), retrieve them (find), check if you have something in storage (exists), replace items (update), or remove them altogether (delete)—all without needing to know how the facility is organized internally.</p></div><p>All DomainDrivenJS repositories come with these standard methods:</p><table><thead><tr><th>Method</th><th>Description</th></tr></thead><tbody><tr><td><code>findById(id)</code></td><td>Find an entity by its identifier</td></tr><tr><td><code>findOne(criteria)</code></td><td>Find a single entity matching criteria</td></tr><tr><td><code>findMany(criteria)</code></td><td>Find all entities matching criteria</td></tr><tr><td><code>exists(id)</code></td><td>Check if an entity with the given ID exists</td></tr><tr><td><code>save(entity)</code></td><td>Create or update an entity</td></tr><tr><td><code>update(id, changes)</code></td><td>Update an entity by ID with partial changes</td></tr><tr><td><code>delete(id)</code></td><td>Delete an entity by ID</td></tr><tr><td><code>count(criteria)</code></td><td>Count entities matching criteria</td></tr></tbody></table><h2 id="query-criteria" tabindex="-1"><a class="header-anchor" href="#query-criteria"><span>Query Criteria</span></a></h2><p>DomainDrivenJS repositories support a flexible query criteria syntax:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// Basic equality</span></span>
<span class="line"><span class="token keyword">await</span> productRepo<span class="token punctuation">.</span><span class="token function">findMany</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Mechanical Keyboard&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Comparison operators</span></span>
<span class="line"><span class="token keyword">await</span> productRepo<span class="token punctuation">.</span><span class="token function">findMany</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">$lt</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">await</span> productRepo<span class="token punctuation">.</span><span class="token function">findMany</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">stockLevel</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">$gte</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Logical operators</span></span>
<span class="line"><span class="token keyword">await</span> productRepo<span class="token punctuation">.</span><span class="token function">findMany</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">$or</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">$contains</span><span class="token operator">:</span> <span class="token string">&#39;Keyboard&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">$contains</span><span class="token operator">:</span> <span class="token string">&#39;Mouse&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">$lt</span><span class="token operator">:</span> <span class="token number">200</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// String operations</span></span>
<span class="line"><span class="token keyword">await</span> productRepo<span class="token punctuation">.</span><span class="token function">findMany</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">$startsWith</span><span class="token operator">:</span> <span class="token string">&#39;Mech&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">await</span> productRepo<span class="token punctuation">.</span><span class="token function">findMany</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">description</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">$contains</span><span class="token operator">:</span> <span class="token string">&#39;ergonomic&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="advanced-repository-patterns" tabindex="-1"><a class="header-anchor" href="#advanced-repository-patterns"><span>Advanced Repository Patterns</span></a></h2><h3 id="specialized-finders" tabindex="-1"><a class="header-anchor" href="#specialized-finders"><span>Specialized Finders</span></a></h3><p>You can create specialized finder methods for common queries:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> ProductRepository <span class="token operator">=</span> <span class="token function">repository</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;ProductRepository&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">entity</span><span class="token operator">:</span> Product<span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">async</span> <span class="token function">findByCategory</span><span class="token punctuation">(</span><span class="token parameter">categoryId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findMany</span><span class="token punctuation">(</span><span class="token punctuation">{</span> categoryId <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">async</span> <span class="token function">findBestSellers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findMany</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token punctuation">{</span> <span class="token literal-property property">salesRank</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">$lte</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span> <span class="token literal-property property">sort</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">salesRank</span><span class="token operator">:</span> <span class="token string">&#39;asc&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token literal-property property">limit</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="transaction-support" tabindex="-1"><a class="header-anchor" href="#transaction-support"><span>Transaction Support</span></a></h3><p>Repositories can support transactions to ensure data consistency:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// Using the transaction manager from your adapter</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> transactionManager <span class="token punctuation">}</span> <span class="token operator">=</span> mongoAdapter<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">await</span> transactionManager<span class="token punctuation">.</span><span class="token function">runInTransaction</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">session</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Pass the session to your repository operations</span></span>
<span class="line">  <span class="token keyword">await</span> productRepo<span class="token punctuation">.</span><span class="token function">updateStock</span><span class="token punctuation">(</span><span class="token string">&#39;product-1&#39;</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> session <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">await</span> orderRepo<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>newOrder<span class="token punctuation">,</span> <span class="token punctuation">{</span> session <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="batch-operations" tabindex="-1"><a class="header-anchor" href="#batch-operations"><span>Batch Operations</span></a></h3><p>For performance, you can perform batch operations:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// Batch insert</span></span>
<span class="line"><span class="token keyword">await</span> productRepo<span class="token punctuation">.</span><span class="token function">saveMany</span><span class="token punctuation">(</span><span class="token punctuation">[</span>product1<span class="token punctuation">,</span> product2<span class="token punctuation">,</span> product3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Batch update</span></span>
<span class="line"><span class="token keyword">await</span> productRepo<span class="token punctuation">.</span><span class="token function">updateMany</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token punctuation">{</span> <span class="token literal-property property">category</span><span class="token operator">:</span> <span class="token string">&#39;keyboards&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span> <span class="token literal-property property">inStock</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Batch delete</span></span>
<span class="line"><span class="token keyword">await</span> productRepo<span class="token punctuation">.</span><span class="token function">deleteMany</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">expiryDate</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">$lt</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="working-with-specifications" tabindex="-1"><a class="header-anchor" href="#working-with-specifications"><span>Working with Specifications</span></a></h2>`,49)),a("p",null,[n[1]||(n[1]=s("Repositories can work seamlessly with specifications (see ")),p(t,{to:"/guide/core/specifications.html"},{default:e(()=>n[0]||(n[0]=[s("Specifications")])),_:1}),n[2]||(n[2]=s("):"))]),n[10]||(n[10]=o(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// Create a specification</span></span>
<span class="line"><span class="token keyword">const</span> InStockSpec <span class="token operator">=</span> <span class="token function">specification</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;InStock&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">isSatisfiedBy</span><span class="token operator">:</span> <span class="token parameter">product</span> <span class="token operator">=&gt;</span> product<span class="token punctuation">.</span>stockLevel <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">toQuery</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">stockLevel</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">$gt</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Use it with a repository</span></span>
<span class="line"><span class="token keyword">const</span> inStockProducts <span class="token operator">=</span> <span class="token keyword">await</span> productRepo<span class="token punctuation">.</span><span class="token function">findMany</span><span class="token punctuation">(</span>InStockSpec<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Combine specifications</span></span>
<span class="line"><span class="token keyword">const</span> FeaturedAndInStock <span class="token operator">=</span> FeaturedSpec<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>InStockSpec<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> featuredInStockProducts <span class="token operator">=</span> <span class="token keyword">await</span> productRepo<span class="token punctuation">.</span><span class="token function">findMany</span><span class="token punctuation">(</span>FeaturedAndInStock<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="repository-composition" tabindex="-1"><a class="header-anchor" href="#repository-composition"><span>Repository Composition</span></a></h2><p>You can compose repositories for more complex operations:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> OrderService <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">async</span> <span class="token function">placeOrder</span><span class="token punctuation">(</span><span class="token parameter">cart<span class="token punctuation">,</span> customer<span class="token punctuation">,</span> productRepo<span class="token punctuation">,</span> orderRepo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Verify all products are in stock</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> cart<span class="token punctuation">.</span>items<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> product <span class="token operator">=</span> <span class="token keyword">await</span> productRepo<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>productId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>product <span class="token operator">||</span> product<span class="token punctuation">.</span>stockLevel <span class="token operator">&lt;</span> item<span class="token punctuation">.</span>quantity<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Product </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token punctuation">.</span>productId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> not available in requested quantity</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// Create the order</span></span>
<span class="line">    <span class="token keyword">const</span> order <span class="token operator">=</span> Order<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token function">generateId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">customerId</span><span class="token operator">:</span> customer<span class="token punctuation">.</span>id<span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">items</span><span class="token operator">:</span> cart<span class="token punctuation">.</span>items<span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token string">&#39;PLACED&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">placedAt</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// Update product stock</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> cart<span class="token punctuation">.</span>items<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">await</span> productRepo<span class="token punctuation">.</span><span class="token function">updateStock</span><span class="token punctuation">(</span></span>
<span class="line">        item<span class="token punctuation">.</span>productId<span class="token punctuation">,</span> </span>
<span class="line">        <span class="token punctuation">(</span><span class="token keyword">await</span> productRepo<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>productId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>stockLevel <span class="token operator">-</span> item<span class="token punctuation">.</span>quantity</span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// Save the order</span></span>
<span class="line">    <span class="token keyword">return</span> orderRepo<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="testing-with-repositories" tabindex="-1"><a class="header-anchor" href="#testing-with-repositories"><span>Testing with Repositories</span></a></h2><p>In-memory adapters make testing with repositories simple:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> InMemoryAdapter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;domaindrivenjs/adapters&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;ProductService&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> productRepo<span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line">  <span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Create a fresh in-memory repository for each test</span></span>
<span class="line">    productRepo <span class="token operator">=</span> ProductRepository<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InMemoryAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line">  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;discounting products decreases their price&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Arrange</span></span>
<span class="line">    <span class="token keyword">const</span> product <span class="token operator">=</span> Product<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Test Product&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">stockLevel</span><span class="token operator">:</span> <span class="token number">10</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">await</span> productRepo<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// Act</span></span>
<span class="line">    <span class="token keyword">await</span> ProductService<span class="token punctuation">.</span><span class="token function">applyDiscount</span><span class="token punctuation">(</span>productRepo<span class="token punctuation">,</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// Assert</span></span>
<span class="line">    <span class="token keyword">const</span> updatedProduct <span class="token operator">=</span> <span class="token keyword">await</span> productRepo<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">expect</span><span class="token punctuation">(</span>updatedProduct<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="common-pitfalls" tabindex="-1"><a class="header-anchor" href="#common-pitfalls"><span>Common Pitfalls</span></a></h2><ol><li><strong>Repository per table</strong>: Creating repositories that match database tables instead of aggregates</li><li><strong>Leaking persistence concerns</strong>: Exposing storage-specific details in the repository interface</li><li><strong>Anemic repositories</strong>: Not providing domain-specific query methods, just basic CRUD</li><li><strong>Fat repositories</strong>: Adding business logic that belongs in domain services</li><li><strong>Inconsistent transaction boundaries</strong>: Not considering aggregate boundaries when designing transactions</li></ol><h2 id="best-practices" tabindex="-1"><a class="header-anchor" href="#best-practices"><span>Best Practices</span></a></h2><div class="hint-container tip"><p class="hint-container-title">Real-world Analogy</p><p>Good repository design is like a well-organized kitchen. Ingredients (data) are stored logically (separate repositories for different types), the chef (domain service) requests ingredients as needed, and kitchen staff (repositories) know exactly where to find and how to prepare each ingredient. No one needs to know that milk is on the third shelf of the walk-in cooler—they just ask for milk.</p></div><ol><li><strong>Repository per aggregate</strong>: Create one repository for each aggregate root, not for every entity</li><li><strong>Keep repositories focused</strong>: Each repository should handle one type of entity</li><li><strong>Abstract storage details</strong>: Don&#39;t expose storage-specific code through repositories</li><li><strong>Use dependency injection</strong>: Pass repositories to services that need them</li><li><strong>Optimize for common queries</strong>: Add custom methods for frequently used queries</li><li><strong>Consider caching</strong>: Implement caching strategies for performance-critical repositories</li><li><strong>Respect aggregate boundaries</strong>: Repositories should enforce the consistency boundaries of aggregates</li></ol><h2 id="next-steps" tabindex="-1"><a class="header-anchor" href="#next-steps"><span>Next Steps</span></a></h2><p>Now that you understand repositories, you might want to learn about:</p>`,14)),a("ul",null,[a("li",null,[p(t,{to:"/guide/core/specifications.html"},{default:e(()=>n[3]||(n[3]=[s("Specifications")])),_:1}),n[4]||(n[4]=s(" - Encapsulate query and validation rules"))]),a("li",null,[p(t,{to:"/guide/core/domain-events.html"},{default:e(()=>n[5]||(n[5]=[s("Domain Events")])),_:1}),n[6]||(n[6]=s(" - Capture significant changes in your domain"))]),a("li",null,[p(t,{to:"/guide/advanced/testing.html#testing-repositories"},{default:e(()=>n[7]||(n[7]=[s("Testing Repositories")])),_:1}),n[8]||(n[8]=s(" - Advanced techniques for testing repositories"))])])])}const v=i(u,[["render",d]]),y=JSON.parse('{"path":"/guide/core/repositories.html","title":"Working with Repositories","lang":"en-US","frontmatter":{},"git":{"updatedTime":1745314373000,"contributors":[{"name":"Marco Müllner","username":"","email":"muellnermarco@gmail.com","commits":1}],"changelog":[{"hash":"f33108869e46aede69a5ee16c04def52d302b17a","time":1745314373000,"email":"muellnermarco@gmail.com","author":"Marco Müllner","message":"feat: refactor method and operation definitions to use factory functions for improved flexibility"}]},"filePathRelative":"guide/core/repositories.md"}');export{v as comp,y as data};
