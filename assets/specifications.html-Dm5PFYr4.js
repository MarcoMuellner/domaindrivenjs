import{_ as o,c,a as i,d as a,b as e,e as s,w as t,r as l,o as r}from"./app-BIej6Nqh.js";const u={};function k(d,n){const p=l("RouteLink");return r(),c("div",null,[n[6]||(n[6]=i(`<h1 id="working-with-specifications" tabindex="-1"><a class="header-anchor" href="#working-with-specifications"><span>Working with Specifications</span></a></h1><p>Specifications are a powerful pattern in Domain-Driven Design that allows you to encapsulate business rules and queries in reusable, composable objects. They help separate the logic of what you&#39;re looking for from how you find or validate it.</p><h2 id="what-is-a-specification" tabindex="-1"><a class="header-anchor" href="#what-is-a-specification"><span>What is a Specification?</span></a></h2><p>A specification is an object that encapsulates a business rule or query criterion, determining whether a given object satisfies specific criteria. Think of it as a &quot;filter&quot; or &quot;predicate&quot; that can be applied to domain objects to test if they meet certain conditions.</p><div class="hint-container tip"><p class="hint-container-title">Real-world Analogy</p><p>Think of job requirements for a position. A job posting might specify: &quot;Candidates must have 3+ years of experience, a computer science degree, and knowledge of JavaScript.&quot; This is a specification—it defines criteria that can be checked against any candidate to determine if they qualify. Similarly, in code, specifications encapsulate business rules (like &quot;premium customers who have spent over $1000 this year&quot;) that can be checked against objects or translated into database queries. Just as you can combine job requirements (&quot;must have X AND Y BUT NOT Z&quot;), specifications can be combined to form complex criteria while keeping each individual rule clear and focused.</p></div><p>Key characteristics:</p><ul><li>Encapsulates a predicate (a yes/no question) about an object</li><li>Can be combined with other specifications using logical operators (and, or, not)</li><li>Can be used for both validation and querying</li><li>Captures business rules in an explicit, named way</li><li>Translates between domain rules and query implementations</li></ul><h2 id="why-use-specifications" tabindex="-1"><a class="header-anchor" href="#why-use-specifications"><span>Why Use Specifications?</span></a></h2><p>Specifications offer several benefits:</p><ul><li><strong>Reusability</strong>: Define business rules once and use them in multiple places</li><li><strong>Expressiveness</strong>: Give meaningful names to complex rules</li><li><strong>Composability</strong>: Combine simple rules to create complex ones</li><li><strong>Separation of concerns</strong>: Separate what (business rule) from how (implementation)</li><li><strong>Optimization opportunities</strong>: Storage-specific optimizations can be applied by repositories</li><li><strong>Improved readability</strong>: Specifications with clear names make your code self-documenting</li><li><strong>Maintainability</strong>: When business rules change, you only need to update them in one place</li></ul><h2 id="how-specifications-work" tabindex="-1"><a class="header-anchor" href="#how-specifications-work"><span>How Specifications Work</span></a></h2><p>Specifications have two main responsibilities:</p><ol><li><strong>Validation</strong>: Check if a domain object satisfies a business rule (<code>isSatisfiedBy</code> method)</li><li><strong>Querying</strong>: Translate the business rule into a query that repositories can use (<code>toQuery</code> method)</li></ol><p>This dual nature allows you to use the same business rule both to filter in-memory objects and to query the database:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">┌─────────────────────────┐</span>
<span class="line">│                         │</span>
<span class="line">│     Specification       │</span>
<span class="line">│                         │</span>
<span class="line">│  ┌─────────────────┐    │</span>
<span class="line">│  │                 │    │</span>
<span class="line">│  │  isSatisfiedBy  │────┼───► In-memory filtering</span>
<span class="line">│  │                 │    │</span>
<span class="line">│  └─────────────────┘    │</span>
<span class="line">│                         │</span>
<span class="line">│  ┌─────────────────┐    │</span>
<span class="line">│  │                 │    │</span>
<span class="line">│  │     toQuery     │────┼───► Database querying</span>
<span class="line">│  │                 │    │</span>
<span class="line">│  └─────────────────┘    │</span>
<span class="line">│                         │</span>
<span class="line">└─────────────────────────┘</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="creating-specifications-with-domaindrivenjs" tabindex="-1"><a class="header-anchor" href="#creating-specifications-with-domaindrivenjs"><span>Creating Specifications with DomainDrivenJS</span></a></h2><p>DomainDrivenJS provides a flexible way to create specifications:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> specification <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;domaindrivenjs&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Create a specification for in-stock products</span></span>
<span class="line"><span class="token keyword">const</span> InStock <span class="token operator">=</span> <span class="token function">specification</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;InStock&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">isSatisfiedBy</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">product</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> product<span class="token punctuation">.</span>stockLevel <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">toQuery</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">stockLevel</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">$gt</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Create a specification for featured products</span></span>
<span class="line"><span class="token keyword">const</span> Featured <span class="token operator">=</span> <span class="token function">specification</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Featured&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">isSatisfiedBy</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">product</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> product<span class="token punctuation">.</span>featured <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">toQuery</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">featured</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Create a specification for products in a specific price range</span></span>
<span class="line"><span class="token keyword">const</span> InPriceRange <span class="token operator">=</span> <span class="token function">specification</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;InPriceRange&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">parameters</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;min&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;max&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">isSatisfiedBy</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">product<span class="token punctuation">,</span> <span class="token punctuation">{</span> min<span class="token punctuation">,</span> max <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> </span>
<span class="line">    product<span class="token punctuation">.</span>price <span class="token operator">&gt;=</span> min <span class="token operator">&amp;&amp;</span> product<span class="token punctuation">.</span>price <span class="token operator">&lt;=</span> max<span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">toQuery</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> min<span class="token punctuation">,</span> max <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> </span>
<span class="line">    <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">$gte</span><span class="token operator">:</span> min<span class="token punctuation">,</span> <span class="token literal-property property">$lte</span><span class="token operator">:</span> max <span class="token punctuation">}</span> </span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Let&#39;s break down the components:</p><ol><li><strong><code>name</code></strong>: A descriptive name for your specification</li><li><strong><code>isSatisfiedBy</code></strong>: Function that checks if an object satisfies the specification</li><li><strong><code>toQuery</code></strong>: Function that converts the specification to a query for repositories</li><li><strong><code>parameters</code></strong>: Optional array of parameter names for parameterized specifications</li></ol><h2 id="composing-specifications" tabindex="-1"><a class="header-anchor" href="#composing-specifications"><span>Composing Specifications</span></a></h2><p>The true power of specifications emerges when you compose them to create more complex specifications:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// Combine specifications with logical operators</span></span>
<span class="line"><span class="token keyword">const</span> FeaturedAndInStock <span class="token operator">=</span> Featured<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>InStock<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> InexpensiveOrFeatured <span class="token operator">=</span> <span class="token function">InPriceRange</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">min</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">max</span><span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>Featured<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> NotFeatured <span class="token operator">=</span> Featured<span class="token punctuation">.</span><span class="token function">not</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Using our composed specifications with an object</span></span>
<span class="line"><span class="token keyword">const</span> product <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Wireless Mouse&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token number">29.99</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">stockLevel</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">featured</span><span class="token operator">:</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>FeaturedAndInStock<span class="token punctuation">.</span><span class="token function">isSatisfiedBy</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>InexpensiveOrFeatured<span class="token punctuation">.</span><span class="token function">isSatisfiedBy</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>NotFeatured<span class="token punctuation">.</span><span class="token function">isSatisfiedBy</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The composed specifications behave just like atomic specifications, with both <code>isSatisfiedBy</code> and <code>toQuery</code> methods. This allows you to build complex business rules from simple, reusable building blocks.</p><h2 id="using-specifications-with-repositories" tabindex="-1"><a class="header-anchor" href="#using-specifications-with-repositories"><span>Using Specifications with Repositories</span></a></h2><p>Specifications shine when used with repositories for querying data:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// Use a specification to query the repository</span></span>
<span class="line"><span class="token keyword">const</span> inStockProducts <span class="token operator">=</span> <span class="token keyword">await</span> productRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>InStock<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Use a composed specification</span></span>
<span class="line"><span class="token keyword">const</span> featuredInStockProducts <span class="token operator">=</span> <span class="token keyword">await</span> productRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span></span>
<span class="line">  Featured<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>InStock<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Use a parameterized specification</span></span>
<span class="line"><span class="token keyword">const</span> affordableProducts <span class="token operator">=</span> <span class="token keyword">await</span> productRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token function">InPriceRange</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">min</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">max</span><span class="token operator">:</span> <span class="token number">50</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Combine parameterized and regular specifications</span></span>
<span class="line"><span class="token keyword">const</span> affordableFeaturedProducts <span class="token operator">=</span> <span class="token keyword">await</span> productRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token function">InPriceRange</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">min</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">max</span><span class="token operator">:</span> <span class="token number">50</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>Featured<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The repository uses the <code>toQuery()</code> method of a specification to convert it to a storage-specific query:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MongoProductRepository</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">collection</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>collection <span class="token operator">=</span> collection<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  </span>
<span class="line">  <span class="token keyword">async</span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token parameter">specification</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Convert the specification to a MongoDB query</span></span>
<span class="line">    <span class="token keyword">const</span> query <span class="token operator">=</span> specification<span class="token punctuation">.</span><span class="token function">toQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// Use the query to find products</span></span>
<span class="line">    <span class="token keyword">const</span> products <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>collection<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// Convert the results to domain objects</span></span>
<span class="line">    <span class="token keyword">return</span> products<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> Product<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="specification-types" tabindex="-1"><a class="header-anchor" href="#specification-types"><span>Specification Types</span></a></h2><h3 id="simple-specifications" tabindex="-1"><a class="header-anchor" href="#simple-specifications"><span>Simple Specifications</span></a></h3><p>Basic specifications that check a single condition:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> IsActive <span class="token operator">=</span> <span class="token function">specification</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;IsActive&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">isSatisfiedBy</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> user<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">&#39;ACTIVE&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">toQuery</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token string">&#39;ACTIVE&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> HasVerifiedEmail <span class="token operator">=</span> <span class="token function">specification</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;HasVerifiedEmail&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">isSatisfiedBy</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> user<span class="token punctuation">.</span>emailVerified <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">toQuery</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">emailVerified</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="parameterized-specifications" tabindex="-1"><a class="header-anchor" href="#parameterized-specifications"><span>Parameterized Specifications</span></a></h3><p>Specifications that take parameters to customize their behavior:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> OlderThan <span class="token operator">=</span> <span class="token function">specification</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;OlderThan&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">parameters</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">isSatisfiedBy</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">person<span class="token punctuation">,</span> <span class="token punctuation">{</span> age <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> person<span class="token punctuation">.</span>age <span class="token operator">&gt;</span> age<span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">toQuery</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> age <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">$gt</span><span class="token operator">:</span> age <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> InCategory <span class="token operator">=</span> <span class="token function">specification</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;InCategory&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">parameters</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;categoryId&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">isSatisfiedBy</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">product<span class="token punctuation">,</span> <span class="token punctuation">{</span> categoryId <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> </span>
<span class="line">    product<span class="token punctuation">.</span>categories<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>categoryId<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">toQuery</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> categoryId <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">categories</span><span class="token operator">:</span> categoryId <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Using parameterized specifications</span></span>
<span class="line"><span class="token keyword">const</span> adultsSpec <span class="token operator">=</span> <span class="token function">OlderThan</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> electronicsSpec <span class="token operator">=</span> <span class="token function">InCategory</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">categoryId</span><span class="token operator">:</span> <span class="token string">&#39;electronics&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="composite-specifications" tabindex="-1"><a class="header-anchor" href="#composite-specifications"><span>Composite Specifications</span></a></h3><p>Specifications created by combining other specifications:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// Active users with verified emails</span></span>
<span class="line"><span class="token keyword">const</span> ActiveVerifiedUser <span class="token operator">=</span> IsActive<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>HasVerifiedEmail<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Products that are either featured or on sale</span></span>
<span class="line"><span class="token keyword">const</span> Promoted <span class="token operator">=</span> IsFeatured<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>IsOnSale<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Products that are in stock but not featured</span></span>
<span class="line"><span class="token keyword">const</span> InStockNonFeatured <span class="token operator">=</span> InStock<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>IsFeatured<span class="token punctuation">.</span><span class="token function">not</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="common-specification-patterns" tabindex="-1"><a class="header-anchor" href="#common-specification-patterns"><span>Common Specification Patterns</span></a></h2><h3 id="generic-specifications" tabindex="-1"><a class="header-anchor" href="#generic-specifications"><span>Generic Specifications</span></a></h3><p>Create reusable specifications that can apply to many types of objects:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// Generic specification for entities with a &#39;createdAt&#39; date field</span></span>
<span class="line"><span class="token keyword">const</span> CreatedAfter <span class="token operator">=</span> <span class="token function">specification</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;CreatedAfter&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">parameters</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;date&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">isSatisfiedBy</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">entity<span class="token punctuation">,</span> <span class="token punctuation">{</span> date <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> entity<span class="token punctuation">.</span>createdAt <span class="token operator">&gt;</span> date<span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">toQuery</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> date <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">createdAt</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">$gt</span><span class="token operator">:</span> date <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Can be used with any entity that has a createdAt field</span></span>
<span class="line"><span class="token keyword">const</span> recentOrders <span class="token operator">=</span> <span class="token keyword">await</span> orderRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token function">CreatedAfter</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">86400000</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// Orders from the last 24 hours</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> newProducts <span class="token operator">=</span> <span class="token keyword">await</span> productRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token function">CreatedAfter</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">7</span> <span class="token operator">*</span> <span class="token number">86400000</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// Products from the last 7 days</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="business-rule-specifications" tabindex="-1"><a class="header-anchor" href="#business-rule-specifications"><span>Business Rule Specifications</span></a></h3><p>Capture complex business rules in specifications:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// Check if an order is eligible for express shipping</span></span>
<span class="line"><span class="token keyword">const</span> EligibleForExpressShipping <span class="token operator">=</span> <span class="token function">specification</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;EligibleForExpressShipping&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">isSatisfiedBy</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">order</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Must have been placed within business hours</span></span>
<span class="line">    <span class="token keyword">const</span> placedAt <span class="token operator">=</span> order<span class="token punctuation">.</span>placedAt<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> isBusinessHours <span class="token operator">=</span> </span>
<span class="line">      placedAt<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">9</span> <span class="token operator">&amp;&amp;</span> </span>
<span class="line">      placedAt<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">17</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">      placedAt<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> </span>
<span class="line">      placedAt<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// All items must be in stock and ready to ship</span></span>
<span class="line">    <span class="token keyword">const</span> allItemsReady <span class="token operator">=</span> order<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> </span>
<span class="line">      item<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">&#39;READY_TO_SHIP&#39;</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// Shipping address must be in an eligible country</span></span>
<span class="line">    <span class="token keyword">const</span> eligibleCountries <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;US&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;CA&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;MX&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> isEligibleCountry <span class="token operator">=</span> eligibleCountries<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span></span>
<span class="line">      order<span class="token punctuation">.</span>shippingAddress<span class="token punctuation">.</span>country</span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> isBusinessHours <span class="token operator">&amp;&amp;</span> allItemsReady <span class="token operator">&amp;&amp;</span> isEligibleCountry<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">toQuery</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">placedAt</span><span class="token operator">:</span> <span class="token punctuation">{</span> </span>
<span class="line">      <span class="token literal-property property">$gte</span><span class="token operator">:</span> <span class="token comment">/* business hours calculation */</span> </span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string-property property">&#39;items.status&#39;</span><span class="token operator">:</span> <span class="token string">&#39;READY_TO_SHIP&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string-property property">&#39;shippingAddress.country&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span> $<span class="token keyword">in</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;US&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;CA&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;MX&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Use it to filter orders</span></span>
<span class="line"><span class="token keyword">const</span> ordersForExpressShipping <span class="token operator">=</span> allOrders<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token parameter">order</span> <span class="token operator">=&gt;</span> EligibleForExpressShipping<span class="token punctuation">.</span><span class="token function">isSatisfiedBy</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="using-specifications-for-validation" tabindex="-1"><a class="header-anchor" href="#using-specifications-for-validation"><span>Using Specifications for Validation</span></a></h3><p>Specifications can be used for validation, not just querying:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// Validate a product before saving</span></span>
<span class="line"><span class="token keyword">const</span> ValidProduct <span class="token operator">=</span> <span class="token function">specification</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;ValidProduct&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">isSatisfiedBy</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">product</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>product<span class="token punctuation">.</span>name <span class="token operator">||</span> product<span class="token punctuation">.</span>name<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>product<span class="token punctuation">.</span>price <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>product<span class="token punctuation">.</span>stockLevel <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>product<span class="token punctuation">.</span>categories<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Use in a service</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">ProductService</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">productRepository</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>productRepository <span class="token operator">=</span> productRepository<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  </span>
<span class="line">  <span class="token keyword">async</span> <span class="token function">createProduct</span><span class="token punctuation">(</span><span class="token parameter">productData</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> product <span class="token operator">=</span> Product<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>productData<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ValidProduct<span class="token punctuation">.</span><span class="token function">isSatisfiedBy</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Invalid product data&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>productRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="performance-considerations" tabindex="-1"><a class="header-anchor" href="#performance-considerations"><span>Performance Considerations</span></a></h2><p>When specifications are used with repositories, consider performance implications:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// Inefficient: Will load all products and filter in memory</span></span>
<span class="line"><span class="token keyword">const</span> affordableProducts <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">await</span> productRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">product</span> <span class="token operator">=&gt;</span> <span class="token function">InPriceRange</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">min</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">max</span><span class="token operator">:</span> <span class="token number">50</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isSatisfiedBy</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Efficient: Uses the specification&#39;s toQuery method to filter at the database level</span></span>
<span class="line"><span class="token keyword">const</span> affordableProducts <span class="token operator">=</span> <span class="token keyword">await</span> productRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token function">InPriceRange</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">min</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">max</span><span class="token operator">:</span> <span class="token number">50</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For complex specifications, ensure your repository can translate them efficiently:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// Complex specification</span></span>
<span class="line"><span class="token keyword">const</span> ComplexProductSpec <span class="token operator">=</span> InStock</span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token function">InPriceRange</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">min</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">max</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token function">InCategory</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">categoryId</span><span class="token operator">:</span> <span class="token string">&#39;electronics&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>IsFeatured<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// The repository should translate this to an efficient query</span></span>
<span class="line"><span class="token comment">// For MongoDB, it might be something like:</span></span>
<span class="line"><span class="token comment">// {</span></span>
<span class="line"><span class="token comment">//   $and: [</span></span>
<span class="line"><span class="token comment">//     { stockLevel: { $gt: 0 } },</span></span>
<span class="line"><span class="token comment">//     { price: { $gte: 10, $lte: 100 } },</span></span>
<span class="line"><span class="token comment">//     { $or: [</span></span>
<span class="line"><span class="token comment">//       { categories: &#39;electronics&#39; },</span></span>
<span class="line"><span class="token comment">//       { featured: true }</span></span>
<span class="line"><span class="token comment">//     ]}</span></span>
<span class="line"><span class="token comment">//   ]</span></span>
<span class="line"><span class="token comment">// }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Some repositories might not fully support all complex query compositions. In such cases, you might need to:</p><ol><li>Split the query into multiple simpler queries</li><li>Perform some filtering in memory</li><li>Create a custom repository method for that specific complex query</li></ol><h2 id="testing-specifications" tabindex="-1"><a class="header-anchor" href="#testing-specifications"><span>Testing Specifications</span></a></h2><p>Specifications should be thoroughly tested to ensure they correctly implement business rules:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;InPriceRange Specification&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> inExpensiveRange <span class="token operator">=</span> <span class="token function">InPriceRange</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">min</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">max</span><span class="token operator">:</span> <span class="token number">50</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line">  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;accepts products within price range&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> product <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token number">25.99</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">expect</span><span class="token punctuation">(</span>inExpensiveRange<span class="token punctuation">.</span><span class="token function">isSatisfiedBy</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line">  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;rejects products below price range&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> product <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">expect</span><span class="token punctuation">(</span>inExpensiveRange<span class="token punctuation">.</span><span class="token function">isSatisfiedBy</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line">  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;rejects products above price range&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> product <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token number">75.50</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">expect</span><span class="token punctuation">(</span>inExpensiveRange<span class="token punctuation">.</span><span class="token function">isSatisfiedBy</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line">  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;generates correct query&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> query <span class="token operator">=</span> inExpensiveRange<span class="token punctuation">.</span><span class="token function">toQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">expect</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">$gte</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">$lte</span><span class="token operator">:</span> <span class="token number">50</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="common-pitfalls" tabindex="-1"><a class="header-anchor" href="#common-pitfalls"><span>Common Pitfalls</span></a></h2><ol><li><strong>Missing <code>toQuery</code> implementation</strong>: Forgetting to implement the <code>toQuery</code> method makes the specification unusable with repositories</li><li><strong>Inconsistent logic</strong>: When <code>isSatisfiedBy</code> and <code>toQuery</code> don&#39;t implement the same business rule</li><li><strong>Performance issues</strong>: Complex specifications with inefficient <code>isSatisfiedBy</code> implementations</li><li><strong>Over-specification</strong>: Creating too many narrow specifications instead of composable ones</li><li><strong>Under-specification</strong>: Making specifications too generic, losing domain expressiveness</li></ol><h2 id="best-practices" tabindex="-1"><a class="header-anchor" href="#best-practices"><span>Best Practices</span></a></h2><ol><li><strong>Name specifications clearly</strong>: Use names that reflect the business concept</li><li><strong>Keep specifications focused</strong>: Each specification should represent one rule or concept</li><li><strong>Prefer composition</strong>: Build complex specifications by composing simpler ones</li><li><strong>Implement <code>toQuery</code></strong>: Always provide a query implementation for repository use</li><li><strong>Reuse specifications</strong>: Define specifications in a central place and reuse them</li><li><strong>Document business rules</strong>: Use specifications to document complex business rules</li><li><strong>Test specifications</strong>: Write tests for your specifications to ensure they work correctly</li><li><strong>Use domain language</strong>: Name specifications using the ubiquitous language of your domain</li></ol><h2 id="next-steps" tabindex="-1"><a class="header-anchor" href="#next-steps"><span>Next Steps</span></a></h2><p>Now that you understand specifications, you might want to learn about:</p>`,65)),a("ul",null,[a("li",null,[e(p,{to:"/guide/core/domain-services.html"},{default:t(()=>n[0]||(n[0]=[s("Domain Services")])),_:1}),n[1]||(n[1]=s(" - Operations that don't conceptually belong to any entity or value object"))]),a("li",null,[e(p,{to:"/guide/core/repositories.html"},{default:t(()=>n[2]||(n[2]=[s("Repositories")])),_:1}),n[3]||(n[3]=s(" - Using specifications with repositories for efficient querying"))]),a("li",null,[e(p,{to:"/guide/advanced/testing.html#testing-specifications"},{default:t(()=>n[4]||(n[4]=[s("Testing Specifications")])),_:1}),n[5]||(n[5]=s(" - Advanced techniques for testing specifications"))])])])}const v=o(u,[["render",k]]),b=JSON.parse('{"path":"/guide/core/specifications.html","title":"Working with Specifications","lang":"en-US","frontmatter":{},"git":{"updatedTime":1744981583000,"contributors":[{"name":"Marco Müllner","username":"","email":"muellnermarco@gmail.com","commits":1}],"changelog":[{"hash":"2ff6a46144749412c398ef011b1ce897d8b0bc48","time":1744981583000,"email":"muellnermarco@gmail.com","author":"Marco Müllner","message":"feat: add real-world analogies to domain concepts for better understanding"}]},"filePathRelative":"guide/core/specifications.md"}');export{v as comp,b as data};
