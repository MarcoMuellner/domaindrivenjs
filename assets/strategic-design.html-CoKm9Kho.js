import{_ as i,c as a,a as n,d as o,e as t,b as r,w as l,r as d,o as c}from"./app-BMHK6CJ7.js";const p={};function g(h,e){const s=d("RouteLink");return c(),a("div",null,[e[3]||(e[3]=n(`<h1 id="strategic-design-in-domain-driven-design" tabindex="-1"><a class="header-anchor" href="#strategic-design-in-domain-driven-design"><span>Strategic Design in Domain-Driven Design</span></a></h1><p>Strategic design is the foundation of Domain-Driven Design, focusing on the &quot;big picture&quot; of your software. While tactical design (entities, value objects, etc.) helps with code-level decisions, strategic design helps you organize your entire system according to business realities.</p><h2 id="why-is-strategic-design-important" tabindex="-1"><a class="header-anchor" href="#why-is-strategic-design-important"><span>Why Is Strategic Design Important?</span></a></h2><p>Before diving into the patterns, let&#39;s understand why strategic design matters:</p><ol><li><strong>Large systems become unmanageable without boundaries</strong> - As systems grow, a single unified model becomes unwieldy and contradictory</li><li><strong>Different parts of your business have different priorities</strong> - Some areas require more investment than others</li><li><strong>Teams need clear boundaries for autonomy</strong> - Explicit boundaries help teams work independently</li><li><strong>Integration between subsystems requires clarity</strong> - Well-defined relationships prevent miscommunication</li></ol><h2 id="bounded-contexts" tabindex="-1"><a class="header-anchor" href="#bounded-contexts"><span>Bounded Contexts</span></a></h2><p>A bounded context is a conceptual boundary around a specific model. Within this boundary, terms, concepts, and rules are consistently defined and used.</p><div class="hint-container tip"><p class="hint-container-title">Real-world Analogy</p><p>Think of countries on a map. Each country has clear borders, its own language, laws, and culture. Words might sound the same across borders but have different meanings or connotations. The word &quot;football&quot; means something different in the US than in Europe. Similarly, in software, bounded contexts are like countries with their own language and rules. The term &quot;customer&quot; might mean something different in the Sales context versus the Support context, just as laws that apply in one country don&#39;t automatically apply in another. And just as countries need explicit protocols for border crossings, bounded contexts need explicit protocols for how information passes between them.</p></div><h3 id="key-characteristics" tabindex="-1"><a class="header-anchor" href="#key-characteristics"><span>Key Characteristics</span></a></h3><ul><li><strong>Explicit boundary</strong> - Clear definition of what&#39;s inside vs. outside</li><li><strong>Linguistic consistency</strong> - Terms have a single meaning inside the boundary</li><li><strong>Unified model</strong> - All concepts within the context form a cohesive model</li><li><strong>Dedicated team ownership</strong> - Typically owned by a single team</li><li><strong>Physical manifestation</strong> - Often manifests as separate codebases or modules</li></ul><h3 id="real-world-example" tabindex="-1"><a class="header-anchor" href="#real-world-example"><span>Real World Example</span></a></h3><p>Consider an e-commerce system:</p><ul><li><strong>Product Catalog Context</strong> - Here &quot;Product&quot; means something with a description, price, and categories</li><li><strong>Inventory Context</strong> - Here &quot;Product&quot; relates to physical items with stock levels and locations</li><li><strong>Order Context</strong> - Here &quot;Product&quot; is just a line item with a SKU, price, and quantity</li></ul><p>While all three use the term &quot;Product,&quot; its meaning, attributes, and behaviors differ in each context.</p><h3 id="identifying-bounded-contexts" tabindex="-1"><a class="header-anchor" href="#identifying-bounded-contexts"><span>Identifying Bounded Contexts</span></a></h3><p>Look for these signals to identify potential bounded context boundaries:</p><ul><li>Different teams using the same terms differently</li><li>Awkward translations between parts of the system</li><li>Concepts that make sense in one area but not another</li><li>Natural divisions in business processes</li><li>Areas with different rates of change</li><li>Legacy systems that need integration</li></ul><h3 id="practical-tips" tabindex="-1"><a class="header-anchor" href="#practical-tips"><span>Practical Tips</span></a></h3><ol><li><strong>Draw context boundaries on a whiteboard</strong> - Visualize where your contexts begin and end</li><li><strong>Create a glossary for each context</strong> - Document terms and their meanings</li><li><strong>Identify &quot;translation&quot; points</strong> - Where do concepts cross boundaries?</li><li><strong>Start broader, refine later</strong> - Begin with larger contexts and subdivide as needed</li></ol><h2 id="context-mapping" tabindex="-1"><a class="header-anchor" href="#context-mapping"><span>Context Mapping</span></a></h2><p>Context mapping is the process of identifying relationships between bounded contexts. It helps you understand how different parts of your system interact and influence each other.</p><h3 id="common-context-map-relationships" tabindex="-1"><a class="header-anchor" href="#common-context-map-relationships"><span>Common Context Map Relationships</span></a></h3><ol><li><p><strong>Partnership</strong> (🤝) - Two teams collaborate closely with mutual dependencies</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">Team A 🤝 Team B</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>Shared Kernel</strong> (⚙️) - Multiple contexts share a subset of the model</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">Context A ⚙️ Context B</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>Customer-Supplier</strong> (🔄) - Upstream provides what downstream needs</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">Supplier Context ➡️ Customer Context</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>Conformist</strong> (📋) - Downstream adopts upstream&#39;s model without influence</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">Upstream Context ➡️📋 Downstream Context</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>Anti-Corruption Layer</strong> (🛡️) - Translation layer protects a model from external concepts</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">External System ➡️🛡️ Your Context</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>Open Host Service</strong> (🔌) - Well-defined API for integration</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">Core System 🔌 Multiple Consumers</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>Published Language</strong> (📢) - Shared documented interchange format</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">Multiple Systems 📢 Published Schema</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>Separate Ways</strong> (↔️) - No integration (cut off relationship)</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">Context A ↔️ Context B</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>Big Ball of Mud</strong> (🧶) - Undefined/ambiguous boundaries (anti-pattern)</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">System 🧶</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><h3 id="drawing-a-context-map" tabindex="-1"><a class="header-anchor" href="#drawing-a-context-map"><span>Drawing a Context Map</span></a></h3><p>Create a visual representation of your system&#39;s contexts and their relationships:</p><ol><li><strong>Draw each bounded context as a circle or box</strong></li><li><strong>Connect them with arrows showing relationships</strong></li><li><strong>Label the nature of each relationship</strong> (using patterns above)</li><li><strong>Add notes about integration points and translations</strong></li></ol><h3 id="real-example" tabindex="-1"><a class="header-anchor" href="#real-example"><span>Real Example</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">Catalog Context 🔌📢 ➡️ Order Context</span>
<span class="line">       ⬇️</span>
<span class="line">Inventory Context 🛡️ ➡️ Shipping Context</span>
<span class="line">       ⬆️</span>
<span class="line">  Legacy ERP ↔️ Modern Analytics Platform</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="domain-types" tabindex="-1"><a class="header-anchor" href="#domain-types"><span>Domain Types</span></a></h2><p>Not all parts of your system are equally valuable. DDD identifies different types of domains to help you allocate effort appropriately.</p><h3 id="core-domain" tabindex="-1"><a class="header-anchor" href="#core-domain"><span>Core Domain</span></a></h3><p>The core domain is your competitive advantage - it&#39;s what makes your business unique and provides the most value.</p><p><strong>Characteristics:</strong></p><ul><li>Differentiates your business from competitors</li><li>Requires specialized knowledge</li><li>Changes frequently as business evolves</li><li>Worth significant investment</li><li>Should be built in-house</li></ul><p><strong>Examples:</strong></p><ul><li>Recommendation algorithm for a streaming service</li><li>Risk assessment for an insurance company</li><li>Matching algorithm for a dating app</li></ul><h3 id="supporting-domains" tabindex="-1"><a class="header-anchor" href="#supporting-domains"><span>Supporting Domains</span></a></h3><p>Supporting domains are necessary for your business but don&#39;t provide competitive advantage.</p><p><strong>Characteristics:</strong></p><ul><li>Important to operations</li><li>Specific to your business</li><li>May be implemented in-house or outsourced</li><li>Deserves some investment, but less than core</li></ul><p><strong>Examples:</strong></p><ul><li>Customer management for an e-commerce site</li><li>Reporting for a financial service</li><li>Content management for a media company</li></ul><h3 id="generic-subdomains" tabindex="-1"><a class="header-anchor" href="#generic-subdomains"><span>Generic Subdomains</span></a></h3><p>Generic subdomains represent well-understood, common business problems.</p><p><strong>Characteristics:</strong></p><ul><li>Common across many businesses</li><li>Well-understood solutions exist</li><li>Best implemented using off-the-shelf solutions</li><li>Low investment priority</li></ul><p><strong>Examples:</strong></p><ul><li>Authentication and authorization</li><li>Email sending</li><li>Payment processing</li><li>Calendar management</li></ul><h3 id="allocation-matrix" tabindex="-1"><a class="header-anchor" href="#allocation-matrix"><span>Allocation Matrix</span></a></h3><p>Combine domain types with investment strategies:</p><table><thead><tr><th>Domain Type</th><th>Build Strategy</th><th>Documentation</th><th>Testing</th><th>Refactoring</th></tr></thead><tbody><tr><td>Core</td><td>In-house, best developers</td><td>Extensive</td><td>Comprehensive</td><td>Frequent</td></tr><tr><td>Supporting</td><td>In-house or outsource</td><td>Good</td><td>Solid coverage</td><td>As needed</td></tr><tr><td>Generic</td><td>Buy or open source</td><td>Minimal</td><td>Basic</td><td>Rarely</td></tr></tbody></table><h2 id="tools-and-techniques" tabindex="-1"><a class="header-anchor" href="#tools-and-techniques"><span>Tools and Techniques</span></a></h2><p>Let&#39;s explore practical tools for applying strategic DDD:</p><h3 id="_1-event-storming" tabindex="-1"><a class="header-anchor" href="#_1-event-storming"><span>1. Event Storming</span></a></h3><p>Event storming is a workshop technique for discovering domain knowledge:</p><ol><li><strong>Gather diverse participants</strong> (developers, domain experts, product owners)</li><li><strong>Use a large modeling space</strong> (wall with butcher paper or digital whiteboard)</li><li><strong>Start with domain events</strong> (orange sticky notes for &quot;things that happen&quot;)</li><li><strong>Add commands</strong> that trigger events (blue sticky notes)</li><li><strong>Identify aggregates</strong> that handle commands and emit events (yellow sticky notes)</li><li><strong>Look for bounded context boundaries</strong> where language or concepts shift</li></ol><p><strong>Resources:</strong></p><ul><li><a href="https://www.eventstorming.com/" target="_blank" rel="noopener noreferrer">Event Storming Cheat Sheet</a></li><li><a href="https://miro.com/templates/event-storming/" target="_blank" rel="noopener noreferrer">Miro Event Storming Template</a></li></ul><h3 id="_2-domain-storytelling" tabindex="-1"><a class="header-anchor" href="#_2-domain-storytelling"><span>2. Domain Storytelling</span></a></h3><p>Domain storytelling uses pictographic language to tell stories about the domain:</p><ol><li><strong>Gather domain experts</strong> who know the processes</li><li><strong>Set up symbols</strong> for actors, work objects, and activities</li><li><strong>Record stories</strong> as domain experts narrate processes</li><li><strong>Draw the flow</strong> visually using the symbols</li><li><strong>Look for bounded contexts</strong> where terminology changes</li></ol><p><strong>Resources:</strong></p><ul><li><a href="https://domainstorytelling.org/" target="_blank" rel="noopener noreferrer">Domain Storytelling Website</a></li><li><a href="https://egon.io/" target="_blank" rel="noopener noreferrer">Online Domain Storytelling Tool</a></li></ul><h3 id="_3-context-mapping-workshop" tabindex="-1"><a class="header-anchor" href="#_3-context-mapping-workshop"><span>3. Context Mapping Workshop</span></a></h3><p>A workshop focused specifically on mapping relationships:</p><ol><li><strong>List all known contexts</strong> on sticky notes</li><li><strong>Arrange contexts</strong> spatially based on relevance</li><li><strong>Draw connections</strong> between related contexts</li><li><strong>Label relationships</strong> with context mapping patterns</li><li><strong>Identify integration challenges</strong> at boundaries</li><li><strong>Discover missing contexts</strong> through the process</li></ol><h3 id="_4-domain-message-flow-modeling" tabindex="-1"><a class="header-anchor" href="#_4-domain-message-flow-modeling"><span>4. Domain Message Flow Modeling</span></a></h3><p>This technique focuses on the messages that flow between contexts:</p><ol><li><strong>Identify key business processes</strong> that span multiple contexts</li><li><strong>List the sequence of messages</strong> that flow between contexts</li><li><strong>Specify the content</strong> of each message</li><li><strong>Validate translations</strong> at context boundaries</li><li><strong>Look for process inefficiencies</strong> and coupling issues</li></ol><h2 id="strategic-design-in-practice" tabindex="-1"><a class="header-anchor" href="#strategic-design-in-practice"><span>Strategic Design in Practice</span></a></h2><h3 id="common-pitfalls" tabindex="-1"><a class="header-anchor" href="#common-pitfalls"><span>Common Pitfalls</span></a></h3><ol><li><strong>Too many bounded contexts</strong> - Creates excessive integration overhead</li><li><strong>Too few bounded contexts</strong> - Results in a &quot;big ball of mud&quot;</li><li><strong>Ignoring team boundaries</strong> - Organizational structure influences effective boundaries</li><li><strong>Overemphasizing technical concerns</strong> - Business concepts should drive boundaries</li><li><strong>Neglecting core domain</strong> - Failing to identify and invest in what matters most</li></ol><h3 id="signs-of-success" tabindex="-1"><a class="header-anchor" href="#signs-of-success"><span>Signs of Success</span></a></h3><ol><li><strong>Team autonomy</strong> - Teams can work independently within their contexts</li><li><strong>Clear translations</strong> - Boundary crossing points have explicit translations</li><li><strong>Evolving core domain</strong> - Core domain continuously improves with business focus</li><li><strong>Stable interfaces</strong> - Context relationships remain stable even as implementations change</li><li><strong>Reduced coordination overhead</strong> - Less need for cross-team synchronization</li></ol><h2 id="summary-and-next-steps" tabindex="-1"><a class="header-anchor" href="#summary-and-next-steps"><span>Summary and Next Steps</span></a></h2><p>Strategic design helps you organize your system according to business realities, set boundaries, and prioritize investments. To get started:</p><ol><li><strong>Identify bounded contexts</strong> in your system</li><li><strong>Map the relationships</strong> between them</li><li><strong>Classify domains</strong> as core, supporting, or generic</li><li><strong>Set appropriate investment levels</strong> for each area</li><li><strong>Implement bounded contexts</strong> with clear boundaries</li></ol>`,77)),o("p",null,[e[1]||(e[1]=t("Next, learn about ")),r(s,{to:"/guide/ddd/tactical-design.html"},{default:l(()=>e[0]||(e[0]=[t("Tactical Design")])),_:1}),e[2]||(e[2]=t(" to implement the patterns within each bounded context, turning strategic insights into code."))]),e[4]||(e[4]=n('<h2 id="recommended-resources" tabindex="-1"><a class="header-anchor" href="#recommended-resources"><span>Recommended Resources</span></a></h2><ul><li><p><strong>Books:</strong></p><ul><li>&quot;Domain-Driven Design&quot; by Eric Evans</li><li>&quot;Strategic Monoliths and Microservices&quot; by Vaughn Vernon</li></ul></li><li><p><strong>Tools:</strong></p><ul><li><a href="https://miro.com/" target="_blank" rel="noopener noreferrer">Miro</a> for collaborative modeling</li><li><a href="https://www.eventstorming.com/" target="_blank" rel="noopener noreferrer">EventStorming.com</a> for event storming resources</li><li><a href="https://contextmapper.org/" target="_blank" rel="noopener noreferrer">Context Mapper</a> for DSL-based context mapping</li></ul></li><li><p><strong>Communities:</strong></p><ul><li><a href="https://discord.gg/eQ8TcAM" target="_blank" rel="noopener noreferrer">DDD Community on Discord</a></li><li><a href="https://ddd-cqrs-es.slack.com/" target="_blank" rel="noopener noreferrer">DDD-CQRS-ES Slack</a></li></ul></li></ul>',2))])}const u=i(p,[["render",g]]),b=JSON.parse('{"path":"/guide/ddd/strategic-design.html","title":"Strategic Design in Domain-Driven Design","lang":"en-US","frontmatter":{},"git":{"updatedTime":1745320932000,"contributors":[{"name":"Marco Müllner","username":"","email":"muellnermarco@gmail.com","commits":1}],"changelog":[{"hash":"1817ed171e2bf88b4954b878f8412d08a8e76391","time":1745320932000,"email":"muellnermarco@gmail.com","author":"Marco Müllner","message":"feat: refactor methods to use methodsFactory pattern for improved consistency and flexibility"}]},"filePathRelative":"guide/ddd/strategic-design.md"}');export{u as comp,b as data};
