import{_ as o,c as i,a as l,d as a,b as t,e as s,w as p,r as c,o as u}from"./app-BMHK6CJ7.js";const r={};function d(k,n){const e=c("RouteLink");return u(),i("div",null,[n[4]||(n[4]=l(`<h1 id="ubiquitous-language" tabindex="-1"><a class="header-anchor" href="#ubiquitous-language"><span>Ubiquitous Language</span></a></h1><p>Imagine a software project where developers talk about &quot;users&quot; but business people refer to &quot;customers,&quot; where engineers discuss &quot;processing fees&quot; while the finance team speaks of &quot;transaction costs.&quot; In such an environment, miscommunication becomes inevitable, requirements get lost in translation, and the software gradually drifts away from solving real business problems.</p><p>This is where ubiquitous language comes to the rescue.</p><h2 id="what-is-ubiquitous-language" tabindex="-1"><a class="header-anchor" href="#what-is-ubiquitous-language"><span>What is Ubiquitous Language?</span></a></h2><p>Ubiquitous language is a shared vocabulary that is consistently used by <strong>both domain experts and technical team members</strong> across all forms of communication: conversations, documentation, diagrams, and most importantly—in the code itself.</p><div class="hint-container tip"><p class="hint-container-title">Real-world Analogy</p><p>Imagine building a house where the architect calls it a &quot;living room,&quot; the builder calls it a &quot;main hall,&quot; the electrician calls it a &quot;front space,&quot; and the interior designer calls it a &quot;primary area.&quot; Confusion would be inevitable, measurements would be misunderstood, and features would be implemented incorrectly. In contrast, when everyone uses the same term—&quot;living room&quot;—communication becomes clear and efficient. Similarly, ubiquitous language ensures that everyone on a software project uses the same terms for the same concepts, eliminating confusion and misalignment between how the business thinks and how the software is built.</p></div><p>It&#39;s called &quot;ubiquitous&quot; because it appears everywhere in your project:</p><ul><li>In <strong>conversations</strong> between team members</li><li>In <strong>documentation</strong> and requirements</li><li>In <strong>diagrams</strong> and visual models</li><li>In <strong>code</strong> (class names, method names, variables)</li><li>In <strong>tests</strong> that verify behavior</li><li>In <strong>user interfaces</strong> presented to users</li></ul><h2 id="why-ubiquitous-language-transforms-projects" tabindex="-1"><a class="header-anchor" href="#why-ubiquitous-language-transforms-projects"><span>Why Ubiquitous Language Transforms Projects</span></a></h2><h3 id="_1-eliminating-translation-layers" tabindex="-1"><a class="header-anchor" href="#_1-eliminating-translation-layers"><span>1. Eliminating Translation Layers</span></a></h3><p>Without a shared language, each conversation requires translation:</p><blockquote><p>Domain Expert: &quot;When a member reserves a book, we need to put it on hold for 48 hours.&quot;</p></blockquote><blockquote><p>Developer&#39;s mental translation: &quot;When a [user] [requests] a [product], we need to [flag it as unavailable] for [2 days].&quot;</p></blockquote><p>Code result:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">User<span class="token punctuation">.</span><span class="token function">requestProduct</span><span class="token punctuation">(</span>productId<span class="token punctuation">,</span> dayCount<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>With each translation, meaning is lost or distorted, like a game of telephone. Ubiquitous language eliminates these translation layers:</p><blockquote><p>Domain Expert: &quot;When a member reserves a book, we need to put it on hold for 48 hours.&quot;</p></blockquote><blockquote><p>Developer: &quot;Got it, members can reserve books with a 48-hour hold period.&quot;</p></blockquote><p>Code result:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">Member<span class="token punctuation">.</span><span class="token function">reserveBook</span><span class="token punctuation">(</span>bookId<span class="token punctuation">,</span> HoldPeriod<span class="token punctuation">.</span><span class="token function">hours</span><span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_2-surfacing-hidden-concepts" tabindex="-1"><a class="header-anchor" href="#_2-surfacing-hidden-concepts"><span>2. Surfacing Hidden Concepts</span></a></h3><p>By paying careful attention to language, you often discover important domain concepts that might otherwise remain hidden:</p><p>Without ubiquitous language:</p><blockquote><p>&quot;The system should check if users can access content.&quot;</p></blockquote><p>With ubiquitous language:</p><blockquote><p>The system should verify that members have an active subscription to access premium content.&quot;</p></blockquote><p>The second statement reveals several important concepts: membership status, subscription, and content categorization.</p><h3 id="_3-creating-a-living-glossary" tabindex="-1"><a class="header-anchor" href="#_3-creating-a-living-glossary"><span>3. Creating a Living Glossary</span></a></h3><p>Ubiquitous language creates a common reference point:</p><table><thead><tr><th>Term</th><th>Definition</th><th>Usage Context</th></tr></thead><tbody><tr><td>Member</td><td>A person with an account in the system</td><td>Replaces generic &quot;user&quot; term</td></tr><tr><td>Reserve</td><td>Request a book be set aside for later pickup</td><td>Distinct from &quot;borrow&quot; which means taking possession</td></tr><tr><td>Hold Period</td><td>Time a reserved book is kept before being released back to available status</td><td>Standard is 48 hours</td></tr></tbody></table><h2 id="building-a-ubiquitous-language" tabindex="-1"><a class="header-anchor" href="#building-a-ubiquitous-language"><span>Building a Ubiquitous Language</span></a></h2><p>Creating a shared language doesn&#39;t happen automatically. It requires deliberate effort and ongoing refinement.</p><h3 id="_1-listen-to-domain-experts" tabindex="-1"><a class="header-anchor" href="#_1-listen-to-domain-experts"><span>1. Listen to Domain Experts</span></a></h3><p>Start by listening to how experts naturally talk about their domain:</p><ul><li>What <strong>nouns</strong> do they use repeatedly? (These often become entities or value objects)</li><li>What <strong>verbs</strong> describe important actions? (These often become methods or services)</li><li>What <strong>adjectives</strong> or <strong>states</strong> do they mention? (These might be properties or states)</li><li>What <strong>rules or constraints</strong> do they emphasize? (These become validations or invariants)</li></ul><p>Pay close attention to:</p><ul><li><strong>Specialized terminology</strong> and jargon</li><li><strong>Distinctions</strong> they make that might seem subtle to outsiders</li><li><strong>Categories</strong> they use to organize concepts</li><li><strong>Processes</strong> they describe as having specific steps or stages</li></ul><h3 id="_2-experiment-with-the-language" tabindex="-1"><a class="header-anchor" href="#_2-experiment-with-the-language"><span>2. Experiment with the Language</span></a></h3><p>Once you&#39;ve collected terms, work together to refine them:</p><blockquote><p>Domain Expert: &quot;We have regular riders and premium riders.&quot;</p></blockquote><blockquote><p>Developer: &quot;So we have two types of users with different privileges?&quot;</p></blockquote><blockquote><p>Domain Expert: &quot;No, they&#39;re all members. But some have basic plans and others have premium subscriptions.&quot;</p></blockquote><blockquote><p>Developer: &quot;I see, so we have members with different subscription plans.&quot;</p></blockquote><p>Through this dialogue, you&#39;ve refined the terms from &quot;regular/premium riders&quot; to &quot;members with basic/premium subscription plans.&quot;</p><h3 id="_3-document-the-language" tabindex="-1"><a class="header-anchor" href="#_3-document-the-language"><span>3. Document the Language</span></a></h3><p>Create a living glossary that evolves as your understanding deepens:</p><div class="language-markdown line-numbers-mode" data-highlighter="prismjs" data-ext="md"><pre><code><span class="line"><span class="token title important"><span class="token punctuation">#</span> Project Glossary</span></span>
<span class="line"></span>
<span class="line"><span class="token title important"><span class="token punctuation">##</span> Core Concepts</span></span>
<span class="line"></span>
<span class="line"><span class="token title important"><span class="token punctuation">###</span> Member</span></span>
<span class="line">A person who has signed up for our service.</span>
<span class="line"></span>
<span class="line"><span class="token title important"><span class="token punctuation">###</span> Subscription Plan</span></span>
<span class="line">The level of service a member has paid for.</span>
<span class="line"><span class="token list punctuation">-</span> <span class="token bold"><span class="token punctuation">**</span><span class="token content">Basic Plan</span><span class="token punctuation">**</span></span>: Allows weekday rides only</span>
<span class="line"><span class="token list punctuation">-</span> <span class="token bold"><span class="token punctuation">**</span><span class="token content">Premium Plan</span><span class="token punctuation">**</span></span>: Allows unlimited rides</span>
<span class="line"></span>
<span class="line"><span class="token title important"><span class="token punctuation">###</span> Ride</span></span>
<span class="line">A single journey from pickup to destination.</span>
<span class="line"></span>
<span class="line"><span class="token title important"><span class="token punctuation">###</span> Fare</span></span>
<span class="line">The amount charged for a ride based on distance, time, and subscription plan.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Make this glossary accessible to everyone and treat it as a living document.</p><h3 id="_4-embed-the-language-in-code" tabindex="-1"><a class="header-anchor" href="#_4-embed-the-language-in-code"><span>4. Embed the Language in Code</span></a></h3><p>The most important step is making the language live in your code:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// WITHOUT ubiquitous language</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">requestRide</span><span class="token punctuation">(</span><span class="token parameter">startLocation<span class="token punctuation">,</span> endLocation<span class="token punctuation">,</span> paymentMethod</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Implementation...</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// WITH ubiquitous language</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Member</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">bookRide</span><span class="token punctuation">(</span><span class="token parameter">pickupLocation<span class="token punctuation">,</span> destination<span class="token punctuation">,</span> farePaymentMethod</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Implementation using domain concepts directly</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>With DomainDrivenJS, you can express the language directly in your domain model:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> z <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;zod&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> entity<span class="token punctuation">,</span> valueObject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;domaindrivenjs&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Value objects using domain language</span></span>
<span class="line"><span class="token keyword">const</span> SubscriptionPlan <span class="token operator">=</span> <span class="token function">valueObject</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;SubscriptionPlan&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">schema</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">enum</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;BASIC&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;PREMIUM&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">allowsWeekendRides</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token keyword">this</span> <span class="token operator">===</span> <span class="token string">&#39;PREMIUM&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Entity using domain language</span></span>
<span class="line"><span class="token keyword">const</span> Member <span class="token operator">=</span> <span class="token function">entity</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Member&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">schema</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">id</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">subscriptionPlan</span><span class="token operator">:</span> SubscriptionPlan<span class="token punctuation">.</span>schema<span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">activeUntil</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">identity</span><span class="token operator">:</span> <span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">canBookRide</span><span class="token punctuation">(</span><span class="token parameter">rideDateTime</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> isWeekend <span class="token operator">=</span> rideDateTime<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> rideDateTime<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">6</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">const</span> hasActiveSubscription <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>activeUntil<span class="token punctuation">;</span></span>
<span class="line">      </span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hasActiveSubscription<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>isWeekend <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>subscriptionPlan<span class="token punctuation">.</span><span class="token function">allowsWeekendRides</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">      </span>
<span class="line">      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">upgradeToPremium</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> Member<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> </span>
<span class="line">        <span class="token literal-property property">subscriptionPlan</span><span class="token operator">:</span> SubscriptionPlan<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&#39;PREMIUM&#39;</span><span class="token punctuation">)</span> </span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="evolving-the-language" tabindex="-1"><a class="header-anchor" href="#evolving-the-language"><span>Evolving the Language</span></a></h2><p>Ubiquitous language isn&#39;t static—it evolves as your understanding of the domain deepens:</p><h3 id="_1-recognize-evolution-signals" tabindex="-1"><a class="header-anchor" href="#_1-recognize-evolution-signals"><span>1. Recognize Evolution Signals</span></a></h3><p>Watch for signs that the language needs to change:</p><ul><li><strong>Awkward workarounds</strong> in code to express concepts</li><li><strong>Confusion</strong> in discussions about certain terms</li><li><strong>Repeated explanations</strong> needed for the same concepts</li><li><strong>New distinctions</strong> emerging in the domain</li><li><strong>Inconsistent usage</strong> of terms across the team</li></ul><h3 id="_2-refine-through-dialogue" tabindex="-1"><a class="header-anchor" href="#_2-refine-through-dialogue"><span>2. Refine Through Dialogue</span></a></h3><p>When the language needs to evolve, engage domain experts:</p><blockquote><p>Developer: &quot;We&#39;re modeling &#39;ride cancellations,&#39; but our code feels awkward because we&#39;re handling so many special cases.&quot;</p></blockquote><blockquote><p>Domain Expert: &quot;That&#39;s because we distinguish between &#39;member cancellations,&#39; which might incur a fee, and &#39;system cancellations&#39; due to driver issues, which don&#39;t have a fee.&quot;</p></blockquote><blockquote><p>Developer: &quot;I see! So we have different types of cancellations with different rules.&quot;</p></blockquote><h3 id="_3-refactor-code-to-reflect-new-understanding" tabindex="-1"><a class="header-anchor" href="#_3-refactor-code-to-reflect-new-understanding"><span>3. Refactor Code to Reflect New Understanding</span></a></h3><p>Once the language evolves, update your code to match:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// BEFORE: Single cancellation concept</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Ride</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token parameter">reason<span class="token punctuation">,</span> cancellationTime</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>reason <span class="token operator">===</span> <span class="token string">&#39;member-request&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// Check time and possibly apply fee</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>reason <span class="token operator">===</span> <span class="token string">&#39;driver-unavailable&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// No fee</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// etc.</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// AFTER: Explicit cancellation types</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Ride</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">memberCancellation</span><span class="token punctuation">(</span><span class="token parameter">cancellationTime</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Apply cancellation rules for members</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CancellationFee</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> cancellationTime<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  </span>
<span class="line">  <span class="token function">systemCancellation</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Log reason, no fee</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="common-pitfalls-and-solutions" tabindex="-1"><a class="header-anchor" href="#common-pitfalls-and-solutions"><span>Common Pitfalls and Solutions</span></a></h2><h3 id="_1-technical-concepts-leaking-into-the-language" tabindex="-1"><a class="header-anchor" href="#_1-technical-concepts-leaking-into-the-language"><span>1. Technical Concepts Leaking Into the Language</span></a></h3><p><strong>Problem</strong>: Implementation details become part of what&#39;s supposed to be the domain language.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">// Domain contaminated with technical details</span>
<span class="line">&quot;We need to serialize the customer entity, update the customer record in the database, then invalidate the cache.&quot;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Solution</strong>: Maintain a strict separation between domain concepts and technical implementation:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">// Domain language free of implementation details</span>
<span class="line">&quot;We need to update the customer&#39;s address and notify them of the change.&quot;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-multiple-meanings-for-the-same-term" tabindex="-1"><a class="header-anchor" href="#_2-multiple-meanings-for-the-same-term"><span>2. Multiple Meanings for the Same Term</span></a></h3><p><strong>Problem</strong>: The same term means different things in different contexts.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">&quot;Account&quot; could mean:</span>
<span class="line">- A user account (authentication)</span>
<span class="line">- A financial account (banking)</span>
<span class="line">- An account with a supplier (purchasing) </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Solution</strong>:</p><ol><li><strong>Qualify the terms</strong> with context: &quot;UserAccount&quot; vs. &quot;FinancialAccount&quot;</li><li>Or better, <strong>separate into different bounded contexts</strong>, each with its own language</li></ol><h3 id="_3-ambiguous-or-vague-terminology" tabindex="-1"><a class="header-anchor" href="#_3-ambiguous-or-vague-terminology"><span>3. Ambiguous or Vague Terminology</span></a></h3><p><strong>Problem</strong>: Terms that lack precise definitions lead to confusion.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">&quot;The system should handle bad orders.&quot;</span>
<span class="line">What does &quot;bad&quot; mean? Invalid? Cancelled? Suspicious?</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Solution</strong>: Press for specificity and clear definitions:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">&quot;The system should identify fraudulent orders based on our risk assessment criteria.&quot;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_4-resistance-to-domain-terminology" tabindex="-1"><a class="header-anchor" href="#_4-resistance-to-domain-terminology"><span>4. Resistance to Domain Terminology</span></a></h3><p><strong>Problem</strong>: Developers resist using domain terms that seem &quot;strange&quot; to them.</p><p><strong>Solution</strong>:</p><ul><li>Explain how using domain terminology reduces misunderstandings</li><li>Start with the most important or most frequently used terms</li><li>Create a glossary as reference</li><li>Lead by example in code reviews</li></ul><h2 id="practical-techniques" tabindex="-1"><a class="header-anchor" href="#practical-techniques"><span>Practical Techniques</span></a></h2><h3 id="_1-event-storming-for-language-discovery" tabindex="-1"><a class="header-anchor" href="#_1-event-storming-for-language-discovery"><span>1. Event Storming for Language Discovery</span></a></h3><p>Event storming is a collaborative modeling technique that can uncover domain language:</p><ol><li>Gather diverse stakeholders in a room</li><li>Use orange sticky notes to identify domain events (things that happen)</li><li>For each event, identify commands (blue) that triggered it</li><li>Identify entities (yellow) that handle commands and emit events</li><li>Look for consistent terminology and capture it</li></ol><h3 id="_2-glossary-workshops" tabindex="-1"><a class="header-anchor" href="#_2-glossary-workshops"><span>2. Glossary Workshops</span></a></h3><p>Dedicate sessions specifically to building a shared glossary:</p><ol><li>Begin with terms everyone already agrees on</li><li>Add terms where there&#39;s confusion or inconsistency</li><li>Discuss until reaching consensus on definitions</li><li>Document the outcome</li><li>Review and refine periodically</li></ol><h3 id="_3-language-police-role-rotation" tabindex="-1"><a class="header-anchor" href="#_3-language-police-role-rotation"><span>3. &quot;Language Police&quot; Role Rotation</span></a></h3><p>Take turns having someone serve as the &quot;language consistency checker&quot;:</p><ol><li>Assign the role on a rotating basis</li><li>When inconsistent terminology appears, they politely point it out</li><li>The team discusses and agrees on the correct term</li><li>Update the glossary if needed</li></ol><h3 id="_4-code-review-for-language-consistency" tabindex="-1"><a class="header-anchor" href="#_4-code-review-for-language-consistency"><span>4. Code Review for Language Consistency</span></a></h3><p>Add ubiquitous language checks to your code review process:</p><ul><li>Do class, method, and variable names reflect the domain language?</li><li>Do tests use the same terminology as the code and domain experts?</li><li>Could a domain expert understand the high-level code structure?</li></ul><h2 id="implementing-with-domaindrivenjs" tabindex="-1"><a class="header-anchor" href="#implementing-with-domaindrivenjs"><span>Implementing with DomainDrivenJS</span></a></h2><p>DomainDrivenJS supports ubiquitous language through its design:</p><h3 id="_1-explicit-naming" tabindex="-1"><a class="header-anchor" href="#_1-explicit-naming"><span>1. Explicit Naming</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// Value objects named after domain concepts</span></span>
<span class="line"><span class="token keyword">const</span> ReservationStatus <span class="token operator">=</span> <span class="token function">valueObject</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;ReservationStatus&#39;</span><span class="token punctuation">,</span> <span class="token comment">// Explicit name matching domain</span></span>
<span class="line">  <span class="token literal-property property">schema</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">enum</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;PENDING&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;CONFIRMED&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;CANCELLED&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">canBeModified</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token keyword">this</span> <span class="token operator">===</span> <span class="token string">&#39;PENDING&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-behavior-reflecting-domain-rules" tabindex="-1"><a class="header-anchor" href="#_2-behavior-reflecting-domain-rules"><span>2. Behavior Reflecting Domain Rules</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// Methods named using domain verbs</span></span>
<span class="line"><span class="token keyword">const</span> Reservation <span class="token operator">=</span> <span class="token function">entity</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line">  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">!==</span> <span class="token string">&#39;PENDING&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Only pending reservations can be confirmed&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">return</span> Reservation<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token string">&#39;CONFIRMED&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">&#39;CANCELLED&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Reservation is already cancelled&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">return</span> Reservation<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token string">&#39;CANCELLED&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-domain-events-using-domain-language" tabindex="-1"><a class="header-anchor" href="#_3-domain-events-using-domain-language"><span>3. Domain Events Using Domain Language</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> ReservationConfirmed <span class="token operator">=</span> <span class="token function">domainEvent</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;ReservationConfirmed&#39;</span><span class="token punctuation">,</span> <span class="token comment">// Event name from domain</span></span>
<span class="line">  <span class="token literal-property property">schema</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">reservationId</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">confirmedAt</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// Other relevant details</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="real-world-example-library-domain" tabindex="-1"><a class="header-anchor" href="#real-world-example-library-domain"><span>Real-World Example: Library Domain</span></a></h2><p>Let&#39;s look at a more complete example of how ubiquitous language shapes code in a library domain:</p><h3 id="domain-glossary-extract" tabindex="-1"><a class="header-anchor" href="#domain-glossary-extract"><span>Domain Glossary (Extract)</span></a></h3><table><thead><tr><th>Term</th><th>Definition</th></tr></thead><tbody><tr><td>Patron</td><td>A person registered with the library</td></tr><tr><td>Item</td><td>Any material that can be borrowed (book, DVD, etc.)</td></tr><tr><td>Checkout</td><td>The process of a patron borrowing an item</td></tr><tr><td>Due Date</td><td>The date by which an item must be returned</td></tr><tr><td>Hold</td><td>A request to reserve an item that is currently checked out</td></tr><tr><td>Overdue</td><td>Status of an item not returned by its due date</td></tr><tr><td>Fine</td><td>Monetary penalty for overdue items</td></tr></tbody></table><h3 id="code-using-this-language" tabindex="-1"><a class="header-anchor" href="#code-using-this-language"><span>Code Using This Language</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> z <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;zod&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> entity<span class="token punctuation">,</span> valueObject<span class="token punctuation">,</span> aggregate <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;domaindrivenjs&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Value Objects</span></span>
<span class="line"><span class="token keyword">const</span> LibraryCardNumber <span class="token operator">=</span> <span class="token function">valueObject</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;LibraryCardNumber&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">schema</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">regex</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^LIB-\\d{6}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">isExpired</span><span class="token punctuation">(</span><span class="token parameter">currentDate</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> year <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">const</span> currentYear <span class="token operator">=</span> currentDate<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">return</span> year <span class="token operator">&lt;</span> currentYear<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token constant">ISBN</span> <span class="token operator">=</span> <span class="token function">valueObject</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;ISBN&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">schema</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">regex</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^978-\\d{10}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">getPublisherCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Entities</span></span>
<span class="line"><span class="token keyword">const</span> Patron <span class="token operator">=</span> <span class="token function">entity</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Patron&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">schema</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">id</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">cardNumber</span><span class="token operator">:</span> LibraryCardNumber<span class="token punctuation">.</span>schema<span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">status</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">enum</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;ACTIVE&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;SUSPENDED&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;EXPIRED&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">fines</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">identity</span><span class="token operator">:</span> <span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">canCheckout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">&#39;ACTIVE&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fines <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">assessFine</span><span class="token punctuation">(</span><span class="token parameter">amount</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> Patron<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> </span>
<span class="line">        <span class="token literal-property property">fines</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fines <span class="token operator">+</span> amount </span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">payFines</span><span class="token punctuation">(</span><span class="token parameter">amount</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>amount <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fines<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Payment amount exceeds fines due&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">return</span> Patron<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> </span>
<span class="line">        <span class="token literal-property property">fines</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fines <span class="token operator">-</span> amount </span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Aggregates</span></span>
<span class="line"><span class="token keyword">const</span> Checkout <span class="token operator">=</span> <span class="token function">aggregate</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Checkout&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">schema</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">id</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">patronId</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">itemId</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">checkedOutAt</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">dueDate</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">returnedAt</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">optional</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">status</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">enum</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;CHECKED_OUT&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;RETURNED&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;OVERDUE&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;LOST&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">identity</span><span class="token operator">:</span> <span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">invariants</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Due date must be after checkout date&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token function-variable function">check</span><span class="token operator">:</span> <span class="token parameter">checkout</span> <span class="token operator">=&gt;</span> checkout<span class="token punctuation">.</span>dueDate <span class="token operator">&gt;</span> checkout<span class="token punctuation">.</span>checkedOutAt</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">isOverdue</span><span class="token punctuation">(</span><span class="token parameter">currentDate</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">&#39;CHECKED_OUT&#39;</span> <span class="token operator">&amp;&amp;</span> </span>
<span class="line">             currentDate <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dueDate<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">markReturned</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">&#39;RETURNED&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Item already returned&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      </span>
<span class="line">      <span class="token keyword">return</span> Checkout<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">returnedAt</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token string">&#39;RETURNED&#39;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">emitEvent</span><span class="token punctuation">(</span><span class="token string">&#39;ItemReturned&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">checkoutId</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">itemId</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>itemId<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">returnedAt</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">markOverdue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">!==</span> <span class="token string">&#39;CHECKED_OUT&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Only checked out items can be marked overdue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      </span>
<span class="line">      <span class="token keyword">return</span> Checkout<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token string">&#39;OVERDUE&#39;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">emitEvent</span><span class="token punctuation">(</span><span class="token string">&#39;ItemOverdue&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">checkoutId</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">itemId</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>itemId<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">patronId</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>patronId<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">daysOverdue</span><span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dueDate<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Notice how the code directly reflects the domain language from the glossary. A domain expert could read class and method names and recognize their own terminology.</p><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>Ubiquitous language is more than just a glossary of terms—it&#39;s a shared understanding embedded in every aspect of your project. By consciously developing and maintaining this language, you create a powerful bridge between domain expertise and technical implementation.</p><p>Remember these key principles:</p><ol><li><strong>Listen</strong> to domain experts and how they naturally describe their work</li><li><strong>Document</strong> terms and definitions in a living glossary</li><li><strong>Use</strong> the language consistently in all communication</li><li><strong>Embed</strong> the language directly in your code</li><li><strong>Evolve</strong> the language as your understanding deepens</li></ol><p>Building a ubiquitous language takes time and effort, but it pays enormous dividends in reduced misunderstandings, more accurate implementations, and software that truly solves business problems.</p><h2 id="next-steps" tabindex="-1"><a class="header-anchor" href="#next-steps"><span>Next Steps</span></a></h2><p>Now that you understand ubiquitous language, explore how to organize your domain model using:</p>`,121)),a("ul",null,[a("li",null,[t(e,{to:"/guide/ddd/strategic-design.html"},{default:p(()=>n[0]||(n[0]=[s("Strategic Design")])),_:1}),n[1]||(n[1]=s(" for the big picture of your system"))]),a("li",null,[t(e,{to:"/guide/ddd/tactical-design.html"},{default:p(()=>n[2]||(n[2]=[s("Tactical Design")])),_:1}),n[3]||(n[3]=s(" for implementing the details"))])])])}const v=o(r,[["render",d]]),h=JSON.parse('{"path":"/guide/ddd/ubiquitous-language.html","title":"Ubiquitous Language","lang":"en-US","frontmatter":{},"git":{"updatedTime":1745320932000,"contributors":[{"name":"Marco Müllner","username":"","email":"muellnermarco@gmail.com","commits":1}],"changelog":[{"hash":"1817ed171e2bf88b4954b878f8412d08a8e76391","time":1745320932000,"email":"muellnermarco@gmail.com","author":"Marco Müllner","message":"feat: refactor methods to use methodsFactory pattern for improved consistency and flexibility"}]},"filePathRelative":"guide/ddd/ubiquitous-language.md"}');export{v as comp,h as data};
