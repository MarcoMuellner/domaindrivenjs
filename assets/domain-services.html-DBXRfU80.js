import{_ as o,c,a as i,d as a,b as e,e as s,w as t,r as l,o as u}from"./app-BR1hGEJk.js";const r={};function d(k,n){const p=l("RouteLink");return u(),c("div",null,[n[6]||(n[6]=i(`<h1 id="working-with-domain-services" tabindex="-1"><a class="header-anchor" href="#working-with-domain-services"><span>Working with Domain Services</span></a></h1><p>Domain services are an essential tactical pattern in Domain-Driven Design that encapsulates operations that don&#39;t naturally fit within entities or value objects. They represent important processes or business rules involving multiple domain objects.</p><h2 id="what-is-a-domain-service" tabindex="-1"><a class="header-anchor" href="#what-is-a-domain-service"><span>What is a Domain Service?</span></a></h2><p>A domain service is a stateless component that implements business logic or operations that don&#39;t conceptually belong to any single entity or value object. Think of a domain service as a coordinator or process manager that orchestrates interactions between multiple domain objects to achieve a specific business outcome.</p><p>Key characteristics:</p><ul><li>Represents an operation or process in your domain, not a thing</li><li>Coordinates multiple domain objects to perform business logic</li><li>Is stateless (doesn&#39;t maintain its own internal state between operations)</li><li>Named using verbs rather than nouns (e.g., <code>TransferFunds</code> rather than <code>FundsTransferer</code>)</li><li>Implements domain logic that crosses aggregate boundaries</li><li>Expresses important domain concepts that don&#39;t fit naturally in entities or value objects</li></ul><h2 id="why-use-domain-services" tabindex="-1"><a class="header-anchor" href="#why-use-domain-services"><span>Why Use Domain Services?</span></a></h2><p>Domain services offer several benefits:</p><ul><li><strong>Clear responsibility boundaries</strong>: When logic doesn&#39;t naturally belong to a single entity, domain services provide a logical home</li><li><strong>Avoids &quot;God objects&quot;</strong>: Prevents entities from accumulating too many responsibilities</li><li><strong>Domain-focused design</strong>: Expresses domain concepts and operations explicitly</li><li><strong>Preserve encapsulation</strong>: Allows entities and value objects to maintain focused responsibilities</li><li><strong>Simplify complex interactions</strong>: Orchestrates multi-step processes involving multiple domain objects</li><li><strong>Business rule centralization</strong>: Provides a natural place for cross-entity business rules</li></ul><h2 id="when-to-use-domain-services" tabindex="-1"><a class="header-anchor" href="#when-to-use-domain-services"><span>When to Use Domain Services</span></a></h2><p>You should use a domain service when:</p><ul><li>An operation involves multiple aggregates</li><li>The operation doesn&#39;t conceptually belong to any entity or value object</li><li>Business rules apply to relationships between different domain objects</li><li>The behavior represents an important domain process or transformation</li><li>Placing the logic in an entity would violate single responsibility principle</li></ul><p>Common examples include:</p><ul><li>PaymentProcessor (coordinating between Account, Payment, and Transaction)</li><li>OrderFulfillment (coordinating between Order, Inventory, and Shipping)</li><li>RiskAssessor (analyzing Customer, Order history, and Payment method)</li></ul><h2 id="how-domain-services-work" tabindex="-1"><a class="header-anchor" href="#how-domain-services-work"><span>How Domain Services Work</span></a></h2><p>Domain services act as coordinators between multiple domain objects:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">┌────────────────┐</span>
<span class="line">│                │</span>
<span class="line">│  Domain Service│</span>
<span class="line">│                │</span>
<span class="line">└───────┬────────┘</span>
<span class="line">        │</span>
<span class="line">        │ coordinates</span>
<span class="line">        │</span>
<span class="line">        ▼</span>
<span class="line">┌──────────────────────────────────────┐</span>
<span class="line">│                                      │</span>
<span class="line">│  ┌──────────┐    ┌──────────┐        │</span>
<span class="line">│  │          │    │          │        │</span>
<span class="line">│  │ Entity A │    │ Entity B │        │</span>
<span class="line">│  │          │    │          │        │</span>
<span class="line">│  └──────────┘    └──────────┘        │</span>
<span class="line">│                                      │</span>
<span class="line">│  ┌──────────┐    ┌──────────┐        │</span>
<span class="line">│  │          │    │          │        │</span>
<span class="line">│  │ Value    │    │ Repository│        │</span>
<span class="line">│  │ Object   │    │          │        │</span>
<span class="line">│  └──────────┘    └──────────┘        │</span>
<span class="line">│                                      │</span>
<span class="line">└──────────────────────────────────────┘</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A domain service:</p><ol><li>Receives input parameters (which may include domain objects)</li><li>Applies business rules and logic</li><li>May use repositories to retrieve or persist domain objects</li><li>Coordinates operations across multiple domain objects</li><li>Returns results (often modified domain objects)</li></ol><h2 id="creating-domain-services-with-domaindrivenjs" tabindex="-1"><a class="header-anchor" href="#creating-domain-services-with-domaindrivenjs"><span>Creating Domain Services with DomainDrivenJS</span></a></h2><p>DomainDrivenJS provides a simple way to create domain services:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> domainService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;domaindrivenjs&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Create a transfer service that moves money between accounts</span></span>
<span class="line"><span class="token keyword">const</span> FundsTransferService <span class="token operator">=</span> <span class="token function">domainService</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;FundsTransferService&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">async</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token parameter">sourceAccount<span class="token punctuation">,</span> destinationAccount<span class="token punctuation">,</span> amount<span class="token punctuation">,</span> description</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// Validate the transfer</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>amount<span class="token punctuation">.</span>amount <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Transfer amount must be positive&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      </span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>sourceAccount<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>destinationAccount<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Source and destination accounts must be different&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      </span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sourceAccount<span class="token punctuation">.</span><span class="token function">canWithdraw</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Insufficient funds&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      </span>
<span class="line">      <span class="token comment">// Perform the transfer</span></span>
<span class="line">      <span class="token keyword">const</span> updatedSourceAccount <span class="token operator">=</span> sourceAccount<span class="token punctuation">.</span><span class="token function">withdraw</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">const</span> updatedDestinationAccount <span class="token operator">=</span> destinationAccount<span class="token punctuation">.</span><span class="token function">deposit</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      </span>
<span class="line">      <span class="token comment">// Create transfer record</span></span>
<span class="line">      <span class="token keyword">const</span> transfer <span class="token operator">=</span> Transfer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token function">generateId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">sourceAccountId</span><span class="token operator">:</span> sourceAccount<span class="token punctuation">.</span>id<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">destinationAccountId</span><span class="token operator">:</span> destinationAccount<span class="token punctuation">.</span>id<span class="token punctuation">,</span></span>
<span class="line">        amount<span class="token punctuation">,</span></span>
<span class="line">        description<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">timestamp</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      </span>
<span class="line">      <span class="token comment">// Return the results</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">sourceAccount</span><span class="token operator">:</span> updatedSourceAccount<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">destinationAccount</span><span class="token operator">:</span> updatedDestinationAccount<span class="token punctuation">,</span></span>
<span class="line">        transfer</span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Let&#39;s break down the components:</p><ol><li><strong><code>name</code></strong>: A descriptive name for your domain service</li><li><strong><code>methods</code></strong>: Functions that implement the service operations</li></ol><h2 id="using-domain-services" tabindex="-1"><a class="header-anchor" href="#using-domain-services"><span>Using Domain Services</span></a></h2><p>Domain services are typically injected into application services or controllers:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// In an application service or controller</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">AccountController</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token parameter">accountRepository<span class="token punctuation">,</span></span>
<span class="line">    transferRepository<span class="token punctuation">,</span></span>
<span class="line">    fundsTransferService</span></span>
<span class="line">  <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>accountRepository <span class="token operator">=</span> accountRepository<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>transferRepository <span class="token operator">=</span> transferRepository<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>fundsTransferService <span class="token operator">=</span> fundsTransferService<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  </span>
<span class="line">  <span class="token keyword">async</span> <span class="token function">transferFunds</span><span class="token punctuation">(</span><span class="token parameter">sourceAccountId<span class="token punctuation">,</span> destinationAccountId<span class="token punctuation">,</span> amount<span class="token punctuation">,</span> description</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Get the accounts</span></span>
<span class="line">    <span class="token keyword">const</span> sourceAccount <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>accountRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>sourceAccountId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> destinationAccount <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>accountRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>destinationAccountId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sourceAccount <span class="token operator">||</span> <span class="token operator">!</span>destinationAccount<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Account not found&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// Perform the transfer using the domain service</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> </span>
<span class="line">      <span class="token literal-property property">sourceAccount</span><span class="token operator">:</span> updatedSourceAccount<span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">destinationAccount</span><span class="token operator">:</span> updatedDestinationAccount<span class="token punctuation">,</span></span>
<span class="line">      transfer</span>
<span class="line">    <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fundsTransferService<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span></span>
<span class="line">      sourceAccount<span class="token punctuation">,</span></span>
<span class="line">      destinationAccount<span class="token punctuation">,</span></span>
<span class="line">      Money<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span> amount<span class="token punctuation">,</span> <span class="token literal-property property">currency</span><span class="token operator">:</span> <span class="token string">&#39;USD&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      description</span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// Save the results</span></span>
<span class="line">    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>accountRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>updatedSourceAccount<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>accountRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>updatedDestinationAccount<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>transferRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>transfer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> transfer<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Notice that:</p><ol><li>The domain service focuses on core business logic (the transfer rules)</li><li>The application service handles transaction concerns, persistence, and input/output mapping</li><li>The domain service returns modified domain objects without persisting them</li></ol><h2 id="domain-services-vs-application-services" tabindex="-1"><a class="header-anchor" href="#domain-services-vs-application-services"><span>Domain Services vs. Application Services</span></a></h2><p>Understanding the difference between domain services and application services is crucial for clean DDD architecture:</p><table><thead><tr><th>Aspect</th><th>Domain Service</th><th>Application Service</th></tr></thead><tbody><tr><td><strong>Layer</strong></td><td>Domain layer</td><td>Application layer</td></tr><tr><td><strong>Focus</strong></td><td>Domain logic</td><td>Use case orchestration</td></tr><tr><td><strong>Knowledge</strong></td><td>Knows only about domain model</td><td>Knows about domain model and other layers</td></tr><tr><td><strong>Responsibilities</strong></td><td>Business rules, domain operations</td><td>Transaction management, security, input/output mapping</td></tr><tr><td><strong>State</strong></td><td>Stateless</td><td>May track state for use case</td></tr><tr><td><strong>Dependencies</strong></td><td>Other domain objects</td><td>Domain services, repositories, infrastructure services</td></tr><tr><td><strong>Named after</strong></td><td>Domain processes</td><td>User use cases</td></tr><tr><td><strong>Examples</strong></td><td><code>PaymentProcessor</code>, <code>ShippingCalculator</code></td><td><code>ProcessOrderUseCase</code>, <code>UserRegistrationService</code></td></tr></tbody></table><h2 id="types-of-domain-services" tabindex="-1"><a class="header-anchor" href="#types-of-domain-services"><span>Types of Domain Services</span></a></h2><p>There are several common types of domain services:</p><h3 id="process-services" tabindex="-1"><a class="header-anchor" href="#process-services"><span>Process Services</span></a></h3><p>These services implement a business process that involves multiple domain objects:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> OrderProcessingService <span class="token operator">=</span> <span class="token function">domainService</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;OrderProcessingService&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">async</span> <span class="token function">processOrder</span><span class="token punctuation">(</span><span class="token parameter">order<span class="token punctuation">,</span> inventory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// Check if all items are available</span></span>
<span class="line">      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> order<span class="token punctuation">.</span>items<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> product <span class="token operator">=</span> <span class="token keyword">await</span> inventory<span class="token punctuation">.</span><span class="token function">findProduct</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>productId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>product <span class="token operator">||</span> product<span class="token punctuation">.</span>stockLevel <span class="token operator">&lt;</span> item<span class="token punctuation">.</span>quantity<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Product </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token punctuation">.</span>productId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> not available in requested quantity</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      </span>
<span class="line">      <span class="token comment">// Reserve the inventory</span></span>
<span class="line">      <span class="token keyword">const</span> updatedProducts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> order<span class="token punctuation">.</span>items<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> product <span class="token operator">=</span> <span class="token keyword">await</span> inventory<span class="token punctuation">.</span><span class="token function">findProduct</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>productId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        updatedProducts<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span></span>
<span class="line">          product<span class="token punctuation">.</span><span class="token function">decreaseStock</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>quantity<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      </span>
<span class="line">      <span class="token comment">// Process the payment (could call another domain service)</span></span>
<span class="line">      <span class="token keyword">const</span> payment <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>paymentService<span class="token punctuation">.</span><span class="token function">processPayment</span><span class="token punctuation">(</span></span>
<span class="line">        order<span class="token punctuation">.</span>customerId<span class="token punctuation">,</span></span>
<span class="line">        order<span class="token punctuation">.</span>total<span class="token punctuation">,</span></span>
<span class="line">        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Payment for order </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>order<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      </span>
<span class="line">      <span class="token comment">// Update the order status</span></span>
<span class="line">      <span class="token keyword">const</span> processedOrder <span class="token operator">=</span> order<span class="token punctuation">.</span><span class="token function">markAsPaid</span><span class="token punctuation">(</span>payment<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      </span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">order</span><span class="token operator">:</span> processedOrder<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">products</span><span class="token operator">:</span> updatedProducts<span class="token punctuation">,</span></span>
<span class="line">        payment</span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="calculation-services" tabindex="-1"><a class="header-anchor" href="#calculation-services"><span>Calculation Services</span></a></h3><p>These services perform complex calculations involving multiple domain objects:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> PricingService <span class="token operator">=</span> <span class="token function">domainService</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;PricingService&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">calculateOrderTotal</span><span class="token punctuation">(</span><span class="token parameter">order<span class="token punctuation">,</span> pricingRules<span class="token punctuation">,</span> customerDiscount</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// Start with subtotal</span></span>
<span class="line">      <span class="token keyword">let</span> subtotal <span class="token operator">=</span> Money<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">amount</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">currency</span><span class="token operator">:</span> <span class="token string">&#39;USD&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      </span>
<span class="line">      <span class="token comment">// Add each item&#39;s price</span></span>
<span class="line">      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> order<span class="token punctuation">.</span>items<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> itemTotal <span class="token operator">=</span> item<span class="token punctuation">.</span>unitPrice<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>quantity<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        subtotal <span class="token operator">=</span> subtotal<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>itemTotal<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      </span>
<span class="line">      <span class="token comment">// Apply bulk discounts</span></span>
<span class="line">      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> rule <span class="token keyword">of</span> pricingRules<span class="token punctuation">.</span>bulkDiscounts<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">qualifiesForBulkDiscount</span><span class="token punctuation">(</span>order<span class="token punctuation">,</span> rule<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          subtotal <span class="token operator">=</span> subtotal<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> rule<span class="token punctuation">.</span>discountPercentage<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      </span>
<span class="line">      <span class="token comment">// Apply customer loyalty discount</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>customerDiscount <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        subtotal <span class="token operator">=</span> subtotal<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> customerDiscount<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      </span>
<span class="line">      <span class="token comment">// Calculate tax</span></span>
<span class="line">      <span class="token keyword">const</span> taxRate <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTaxRateForLocation</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span>shippingAddress<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">const</span> tax <span class="token operator">=</span> subtotal<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>taxRate<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      </span>
<span class="line">      <span class="token comment">// Calculate shipping</span></span>
<span class="line">      <span class="token keyword">const</span> shipping <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">calculateShippingCost</span><span class="token punctuation">(</span></span>
<span class="line">        order<span class="token punctuation">.</span>items<span class="token punctuation">,</span></span>
<span class="line">        order<span class="token punctuation">.</span>shippingMethod<span class="token punctuation">,</span></span>
<span class="line">        order<span class="token punctuation">.</span>shippingAddress</span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      </span>
<span class="line">      <span class="token comment">// Calculate total</span></span>
<span class="line">      <span class="token keyword">const</span> total <span class="token operator">=</span> subtotal<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tax<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>shipping<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      </span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">        subtotal<span class="token punctuation">,</span></span>
<span class="line">        tax<span class="token punctuation">,</span></span>
<span class="line">        shipping<span class="token punctuation">,</span></span>
<span class="line">        total</span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// Helper methods for the calculation</span></span>
<span class="line">    <span class="token function">qualifiesForBulkDiscount</span><span class="token punctuation">(</span><span class="token parameter">order<span class="token punctuation">,</span> rule</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// Implementation details...</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">getTaxRateForLocation</span><span class="token punctuation">(</span><span class="token parameter">address</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// Implementation details...</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">calculateShippingCost</span><span class="token punctuation">(</span><span class="token parameter">items<span class="token punctuation">,</span> method<span class="token punctuation">,</span> address</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// Implementation details...</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="coordination-services" tabindex="-1"><a class="header-anchor" href="#coordination-services"><span>Coordination Services</span></a></h3><p>These services coordinate between multiple aggregates:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> InventoryAllocationService <span class="token operator">=</span> <span class="token function">domainService</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;InventoryAllocationService&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">async</span> <span class="token function">allocateInventoryForOrders</span><span class="token punctuation">(</span><span class="token parameter">orders<span class="token punctuation">,</span> inventory<span class="token punctuation">,</span> priorities</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// Sort orders by priority</span></span>
<span class="line">      <span class="token keyword">const</span> sortedOrders <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">prioritizeOrders</span><span class="token punctuation">(</span>orders<span class="token punctuation">,</span> priorities<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      </span>
<span class="line">      <span class="token comment">// Keep track of allocated inventory</span></span>
<span class="line">      <span class="token keyword">const</span> allocations <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">const</span> productAllocations <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      </span>
<span class="line">      <span class="token comment">// Process each order</span></span>
<span class="line">      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> order <span class="token keyword">of</span> sortedOrders<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> orderAllocation <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// Try to allocate each item</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> order<span class="token punctuation">.</span>items<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">const</span> availableQuantity <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAvailableQuantity</span><span class="token punctuation">(</span></span>
<span class="line">            item<span class="token punctuation">.</span>productId<span class="token punctuation">,</span></span>
<span class="line">            inventory<span class="token punctuation">,</span></span>
<span class="line">            productAllocations</span>
<span class="line">          <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          </span>
<span class="line">          <span class="token keyword">const</span> allocatedQuantity <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>quantity<span class="token punctuation">,</span> availableQuantity<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          </span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span>allocatedQuantity <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// Record the allocation</span></span>
<span class="line">            orderAllocation<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">              <span class="token literal-property property">productId</span><span class="token operator">:</span> item<span class="token punctuation">.</span>productId<span class="token punctuation">,</span></span>
<span class="line">              <span class="token literal-property property">quantity</span><span class="token operator">:</span> allocatedQuantity</span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            </span>
<span class="line">            <span class="token comment">// Update the running total</span></span>
<span class="line">            <span class="token keyword">const</span> currentAllocation <span class="token operator">=</span> productAllocations<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>productId<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">            productAllocations<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>productId<span class="token punctuation">,</span> currentAllocation <span class="token operator">+</span> allocatedQuantity<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// Store the allocation for this order</span></span>
<span class="line">        allocations<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span>id<span class="token punctuation">,</span> orderAllocation<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      </span>
<span class="line">      <span class="token keyword">return</span> allocations<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// Helper methods</span></span>
<span class="line">    <span class="token function">prioritizeOrders</span><span class="token punctuation">(</span><span class="token parameter">orders<span class="token punctuation">,</span> priorities</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// Implementation details...</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">getAvailableQuantity</span><span class="token punctuation">(</span><span class="token parameter">productId<span class="token punctuation">,</span> inventory<span class="token punctuation">,</span> allocations</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// Implementation details...</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="domain-services-and-dependencies" tabindex="-1"><a class="header-anchor" href="#domain-services-and-dependencies"><span>Domain Services and Dependencies</span></a></h2><p>Domain services may depend on other domain services:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> OrderFulfillmentService <span class="token operator">=</span> <span class="token function">domainService</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;OrderFulfillmentService&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">dependencies</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">inventoryService</span><span class="token operator">:</span> <span class="token string">&#39;required&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">shippingService</span><span class="token operator">:</span> <span class="token string">&#39;required&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">notificationService</span><span class="token operator">:</span> <span class="token string">&#39;optional&#39;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">async</span> <span class="token function">fulfillOrder</span><span class="token punctuation">(</span><span class="token parameter">order<span class="token punctuation">,</span> <span class="token punctuation">{</span> inventoryService<span class="token punctuation">,</span> shippingService<span class="token punctuation">,</span> notificationService <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// Check if order can be fulfilled</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>order<span class="token punctuation">.</span>status <span class="token operator">!==</span> <span class="token string">&#39;PAID&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Only paid orders can be fulfilled&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      </span>
<span class="line">      <span class="token comment">// Allocate inventory</span></span>
<span class="line">      <span class="token keyword">const</span> allocation <span class="token operator">=</span> <span class="token keyword">await</span> inventoryService<span class="token punctuation">.</span><span class="token function">allocateInventory</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      </span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>allocation<span class="token punctuation">.</span>isComplete<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Cannot fulfill order due to inventory shortage&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      </span>
<span class="line">      <span class="token comment">// Create shipment</span></span>
<span class="line">      <span class="token keyword">const</span> shipment <span class="token operator">=</span> <span class="token keyword">await</span> shippingService<span class="token punctuation">.</span><span class="token function">createShipment</span><span class="token punctuation">(</span></span>
<span class="line">        order<span class="token punctuation">.</span>id<span class="token punctuation">,</span></span>
<span class="line">        order<span class="token punctuation">.</span>shippingAddress<span class="token punctuation">,</span></span>
<span class="line">        order<span class="token punctuation">.</span>items</span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      </span>
<span class="line">      <span class="token comment">// Update order status</span></span>
<span class="line">      <span class="token keyword">const</span> fulfilledOrder <span class="token operator">=</span> order<span class="token punctuation">.</span><span class="token function">markAsShipped</span><span class="token punctuation">(</span>shipment<span class="token punctuation">.</span>trackingNumber<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      </span>
<span class="line">      <span class="token comment">// Notify customer (if notification service is available)</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>notificationService<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">await</span> notificationService<span class="token punctuation">.</span><span class="token function">notifyCustomer</span><span class="token punctuation">(</span></span>
<span class="line">          order<span class="token punctuation">.</span>customerId<span class="token punctuation">,</span></span>
<span class="line">          <span class="token string">&#39;Your order has shipped!&#39;</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Your order </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>order<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> has been shipped. Tracking number: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>shipment<span class="token punctuation">.</span>trackingNumber<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      </span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">order</span><span class="token operator">:</span> fulfilledOrder<span class="token punctuation">,</span></span>
<span class="line">        shipment</span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Using the service with dependencies</span></span>
<span class="line"><span class="token keyword">const</span> fulfillmentService <span class="token operator">=</span> OrderFulfillmentService<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">inventoryService</span><span class="token operator">:</span> InventoryService<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">shippingService</span><span class="token operator">:</span> ShippingService<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">notificationService</span><span class="token operator">:</span> NotificationService<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="testing-domain-services" tabindex="-1"><a class="header-anchor" href="#testing-domain-services"><span>Testing Domain Services</span></a></h2><p>Domain services are easy to test because they&#39;re stateless and have explicit dependencies:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;FundsTransferService&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;should transfer funds between accounts&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Arrange</span></span>
<span class="line">    <span class="token keyword">const</span> sourceAccount <span class="token operator">=</span> Account<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;account-1&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">balance</span><span class="token operator">:</span> Money<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">amount</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">currency</span><span class="token operator">:</span> <span class="token string">&#39;USD&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token string">&#39;ACTIVE&#39;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">const</span> destinationAccount <span class="token operator">=</span> Account<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;account-2&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">balance</span><span class="token operator">:</span> Money<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">amount</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token literal-property property">currency</span><span class="token operator">:</span> <span class="token string">&#39;USD&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token string">&#39;ACTIVE&#39;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">const</span> amount <span class="token operator">=</span> Money<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">amount</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token literal-property property">currency</span><span class="token operator">:</span> <span class="token string">&#39;USD&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> description <span class="token operator">=</span> <span class="token string">&#39;Test transfer&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">const</span> transferService <span class="token operator">=</span> FundsTransferService<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// Act</span></span>
<span class="line">    <span class="token keyword">const</span> result <span class="token operator">=</span> transferService<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span></span>
<span class="line">      sourceAccount<span class="token punctuation">,</span></span>
<span class="line">      destinationAccount<span class="token punctuation">,</span></span>
<span class="line">      amount<span class="token punctuation">,</span></span>
<span class="line">      description</span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// Assert</span></span>
<span class="line">    <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>sourceAccount<span class="token punctuation">.</span>balance<span class="token punctuation">.</span>amount<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">75</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>destinationAccount<span class="token punctuation">.</span>balance<span class="token punctuation">.</span>amount<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">75</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>transfer<span class="token punctuation">.</span>amount<span class="token punctuation">.</span>amount<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>transfer<span class="token punctuation">.</span>sourceAccountId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;account-1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>transfer<span class="token punctuation">.</span>destinationAccountId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;account-2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>transfer<span class="token punctuation">.</span>description<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;Test transfer&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line">  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;should throw error if source account has insufficient funds&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Arrange</span></span>
<span class="line">    <span class="token keyword">const</span> sourceAccount <span class="token operator">=</span> Account<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;account-1&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">balance</span><span class="token operator">:</span> Money<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">amount</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token literal-property property">currency</span><span class="token operator">:</span> <span class="token string">&#39;USD&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token string">&#39;ACTIVE&#39;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">const</span> destinationAccount <span class="token operator">=</span> Account<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;account-2&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">balance</span><span class="token operator">:</span> Money<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">amount</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token literal-property property">currency</span><span class="token operator">:</span> <span class="token string">&#39;USD&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token string">&#39;ACTIVE&#39;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">const</span> amount <span class="token operator">=</span> Money<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">amount</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token literal-property property">currency</span><span class="token operator">:</span> <span class="token string">&#39;USD&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">const</span> transferService <span class="token operator">=</span> FundsTransferService<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// Act &amp; Assert</span></span>
<span class="line">    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      transferService<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>sourceAccount<span class="token punctuation">,</span> destinationAccount<span class="token punctuation">,</span> amount<span class="token punctuation">,</span> <span class="token string">&#39;Test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toThrow</span><span class="token punctuation">(</span><span class="token string">&#39;Insufficient funds&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also mock dependencies when testing domain services with dependencies:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;OrderFulfillmentService&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;should fulfill an order when inventory is available&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Arrange</span></span>
<span class="line">    <span class="token keyword">const</span> order <span class="token operator">=</span> Order<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;order-1&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token string">&#39;PAID&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token comment">// other properties...</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">const</span> mockInventoryService <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">allocateInventory</span><span class="token operator">:</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mockResolvedValue</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">isComplete</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">const</span> mockShippingService <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">createShipment</span><span class="token operator">:</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mockResolvedValue</span><span class="token punctuation">(</span><span class="token punctuation">{</span> </span>
<span class="line">        <span class="token literal-property property">trackingNumber</span><span class="token operator">:</span> <span class="token string">&#39;TRACK123&#39;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">const</span> fulfillmentService <span class="token operator">=</span> OrderFulfillmentService<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">inventoryService</span><span class="token operator">:</span> mockInventoryService<span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">shippingService</span><span class="token operator">:</span> mockShippingService</span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// Act</span></span>
<span class="line">    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> fulfillmentService<span class="token punctuation">.</span><span class="token function">fulfillOrder</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// Assert</span></span>
<span class="line">    <span class="token function">expect</span><span class="token punctuation">(</span>mockInventoryService<span class="token punctuation">.</span>allocateInventory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalledWith</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">expect</span><span class="token punctuation">(</span>mockShippingService<span class="token punctuation">.</span>createShipment<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>order<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;SHIPPED&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>order<span class="token punctuation">.</span>trackingNumber<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;TRACK123&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="common-pitfalls" tabindex="-1"><a class="header-anchor" href="#common-pitfalls"><span>Common Pitfalls</span></a></h2><ol><li><strong>Adding state to domain services</strong>: Domain services should be stateless</li><li><strong>Including infrastructure concerns</strong>: Domain services should be pure domain logic, not deal with persistence, messaging, etc.</li><li><strong>Anemic domain services</strong>: Services that just pass through to repositories without adding domain logic</li><li><strong>Too many responsibilities</strong>: Services that try to do too much instead of focusing on a specific domain process</li><li><strong>Application logic leaking in</strong>: Including UI, persistence, or other non-domain concerns in domain services</li></ol><h2 id="best-practices" tabindex="-1"><a class="header-anchor" href="#best-practices"><span>Best Practices</span></a></h2><ol><li><strong>Name services after domain processes</strong>: Use verbs and domain terminology</li><li><strong>Keep services stateless</strong>: Domain services shouldn&#39;t have their own state</li><li><strong>Focus on a single responsibility</strong>: Each service should represent one concept</li><li><strong>Make dependencies explicit</strong>: Clearly define what each service needs to work</li><li><strong>Use immutable parameters and return values</strong>: Don&#39;t modify input objects</li><li><strong>Document business rules</strong>: Document the business rules implemented by the service</li><li><strong>Validate inputs</strong>: Ensure all inputs are valid before processing</li></ol><h2 id="common-domain-service-examples" tabindex="-1"><a class="header-anchor" href="#common-domain-service-examples"><span>Common Domain Service Examples</span></a></h2><table><thead><tr><th>Domain Service</th><th>Description</th><th>Example Methods</th></tr></thead><tbody><tr><td>PaymentProcessor</td><td>Handles payment processing</td><td>processPayment, refundPayment, authorizePayment</td></tr><tr><td>PricingEngine</td><td>Calculates prices based on rules</td><td>calculatePrice, applyDiscount, getPriceWithTax</td></tr><tr><td>InventoryAllocator</td><td>Allocates inventory to orders</td><td>allocateInventory, releaseInventory, checkAvailability</td></tr><tr><td>FraudDetector</td><td>Analyzes transactions for fraud</td><td>assessRisk, flagSuspiciousActivity, verifyIdentity</td></tr><tr><td>ReservationService</td><td>Manages resource reservations</td><td>reserveResource, cancelReservation, extendReservation</td></tr><tr><td>ShippingCalculator</td><td>Determines shipping options</td><td>calculateShippingCost, getDeliveryEstimate, validateAddress</td></tr><tr><td>TaxCalculator</td><td>Handles tax calculations</td><td>calculateTax, determineJurisdiction, applySalesTax</td></tr><tr><td>WorkflowEngine</td><td>Processes business workflows</td><td>progressWorkflow, assignTask, completeStep</td></tr></tbody></table><h2 id="next-steps" tabindex="-1"><a class="header-anchor" href="#next-steps"><span>Next Steps</span></a></h2><p>Now that you understand domain services, you might want to learn about:</p>`,59)),a("ul",null,[a("li",null,[e(p,{to:"/guide/core/aggregates.html"},{default:t(()=>n[0]||(n[0]=[s("Aggregates")])),_:1}),n[1]||(n[1]=s(" - Clusters of domain objects that are treated as a unit"))]),a("li",null,[e(p,{to:"/guide/core/domain-events.html"},{default:t(()=>n[2]||(n[2]=[s("Domain Events")])),_:1}),n[3]||(n[3]=s(" - Notifications of significant occurrences in the domain"))]),a("li",null,[e(p,{to:"/guide/advanced/testing.html#testing-domain-services"},{default:t(()=>n[4]||(n[4]=[s("Testing Domain Services")])),_:1}),n[5]||(n[5]=s(" - Advanced techniques for testing domain services"))])])])}const m=o(r,[["render",d]]),b=JSON.parse('{"path":"/guide/core/domain-services.html","title":"Working with Domain Services","lang":"en-US","frontmatter":{},"git":{"updatedTime":1744915094000,"contributors":[{"name":"Marco Müllner","username":"","email":"muellnermarco@gmail.com","commits":1}],"changelog":[{"hash":"44da9318d3a8f92dc0163b89484d222abe023391","time":1744915094000,"email":"muellnermarco@gmail.com","author":"Marco Müllner","message":"feat: rename project from Domainify to DomainDrivenJS; update references and documentation accordingly"}]},"filePathRelative":"guide/core/domain-services.md"}');export{m as comp,b as data};
