import{_ as i,c as l,a as e,d as t,b as p,w as o,e as s,r as c,o as r}from"./app-BIej6Nqh.js";const u={};function d(k,n){const a=c("RouteLink");return r(),l("div",null,[n[10]||(n[10]=e('<h1 id="core-domain-driven-design-concepts" tabindex="-1"><a class="header-anchor" href="#core-domain-driven-design-concepts"><span>Core Domain-Driven Design Concepts</span></a></h1><p>Domain-Driven Design provides a set of powerful building blocks to express your domain model in code. DomainDrivenJS makes these concepts easy to implement with a modern, functional approach tailored to JavaScript.</p><h2 id="quick-reference" tabindex="-1"><a class="header-anchor" href="#quick-reference"><span>Quick Reference</span></a></h2><table><thead><tr><th>Concept</th><th>Purpose</th><th>Example</th></tr></thead><tbody><tr><td><a href="#value-objects">Value Objects</a></td><td>Immutable objects defined by attributes</td><td>Money, Email, Address</td></tr><tr><td><a href="#entities">Entities</a></td><td>Objects with identity that can change</td><td>User, Order, Product</td></tr><tr><td><a href="#aggregates">Aggregates</a></td><td>Clusters of objects treated as a unit</td><td>Order with OrderItems</td></tr><tr><td><a href="#domain-events">Domain Events</a></td><td>Record of something significant happening</td><td>OrderPlaced, PaymentReceived</td></tr><tr><td><a href="#repositories">Repositories</a></td><td>Provide access to aggregates</td><td>OrderRepository, ProductRepository</td></tr><tr><td><a href="#specifications">Specifications</a></td><td>Encapsulate business rules and queries</td><td>ActiveUsers, OverdueOrders</td></tr><tr><td><a href="#domain-services">Domain Services</a></td><td>Operations across multiple objects</td><td>PaymentProcessor, InventoryAllocator</td></tr></tbody></table><h2 id="value-objects" tabindex="-1"><a class="header-anchor" href="#value-objects"><span>Value Objects</span></a></h2><p>Value objects are immutable objects defined by their attributes rather than their identity. Two value objects with the same attributes are considered equal, regardless of whether they are the same instance.</p>',6)),t("p",null,[p(a,{to:"/guide/core/value-objects.html"},{default:o(()=>n[0]||(n[0]=[s("Learn more about Value Objects")])),_:1})]),n[11]||(n[11]=e(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// Example: Money value object</span></span>
<span class="line"><span class="token keyword">const</span> price <span class="token operator">=</span> Money<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">amount</span><span class="token operator">:</span> <span class="token number">29.99</span><span class="token punctuation">,</span> <span class="token literal-property property">currency</span><span class="token operator">:</span> <span class="token string">&#39;USD&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> tax <span class="token operator">=</span> Money<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">amount</span><span class="token operator">:</span> <span class="token number">2.40</span><span class="token punctuation">,</span> <span class="token literal-property property">currency</span><span class="token operator">:</span> <span class="token string">&#39;USD&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> total <span class="token operator">=</span> price<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tax<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// New Money object with amount = 32.39</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="entities" tabindex="-1"><a class="header-anchor" href="#entities"><span>Entities</span></a></h2><p>Entities are objects with identity that persists across changes. Unlike value objects, entities are equal only if they have the same identity, even if their attributes differ.</p>`,3)),t("p",null,[p(a,{to:"/guide/core/entities.html"},{default:o(()=>n[1]||(n[1]=[s("Learn more about Entities")])),_:1})]),n[12]||(n[12]=e(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// Example: User entity</span></span>
<span class="line"><span class="token keyword">const</span> user <span class="token operator">=</span> User<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;user-123&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token string">&#39;john@example.com&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Update returns a new instance with same identity</span></span>
<span class="line"><span class="token keyword">const</span> updatedUser <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">changeName</span><span class="token punctuation">(</span><span class="token string">&#39;John Smith&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="aggregates" tabindex="-1"><a class="header-anchor" href="#aggregates"><span>Aggregates</span></a></h2><p>Aggregates are clusters of entities and value objects treated as a single unit for data changes. Each aggregate has a root entity that controls access to all members within the boundary.</p>`,3)),t("p",null,[p(a,{to:"/guide/core/aggregates.html"},{default:o(()=>n[2]||(n[2]=[s("Learn more about Aggregates")])),_:1})]),n[13]||(n[13]=e(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// Example: Order aggregate with line items</span></span>
<span class="line"><span class="token keyword">const</span> order <span class="token operator">=</span> Order<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;order-456&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">customerId</span><span class="token operator">:</span> <span class="token string">&#39;customer-789&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token string">&#39;DRAFT&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Add item to the order</span></span>
<span class="line"><span class="token keyword">const</span> updatedOrder <span class="token operator">=</span> order<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span>product<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="domain-events" tabindex="-1"><a class="header-anchor" href="#domain-events"><span>Domain Events</span></a></h2><p>Domain events represent significant occurrences within your domain that other parts of the system might be interested in. They record what happened, enabling loosely coupled communication between components.</p>`,3)),t("p",null,[p(a,{to:"/guide/core/domain-events.html"},{default:o(()=>n[3]||(n[3]=[s("Learn more about Domain Events")])),_:1})]),n[14]||(n[14]=e(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// Example: Emitting an event when order is placed</span></span>
<span class="line"><span class="token keyword">const</span> placedOrder <span class="token operator">=</span> order<span class="token punctuation">.</span><span class="token function">placeOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">emitEvent</span><span class="token punctuation">(</span>OrderPlaced<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">orderId</span><span class="token operator">:</span> order<span class="token punctuation">.</span>id<span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">customerId</span><span class="token operator">:</span> order<span class="token punctuation">.</span>customerId<span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">orderTotal</span><span class="token operator">:</span> order<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">placedAt</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Handling the event</span></span>
<span class="line">eventBus<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>OrderPlaced<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">await</span> notificationService<span class="token punctuation">.</span><span class="token function">sendOrderConfirmation</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>customerId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="repositories" tabindex="-1"><a class="header-anchor" href="#repositories"><span>Repositories</span></a></h2><p>Repositories provide a collection-like interface for accessing and persisting aggregates. They hide the details of data access, allowing your domain model to remain focused on business logic.</p>`,3)),t("p",null,[p(a,{to:"/guide/core/repositories.html"},{default:o(()=>n[4]||(n[4]=[s("Learn more about Repositories")])),_:1})]),n[15]||(n[15]=e(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// Example: Saving and retrieving orders</span></span>
<span class="line"><span class="token keyword">await</span> orderRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> retrievedOrder <span class="token operator">=</span> <span class="token keyword">await</span> orderRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token string">&#39;order-456&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> draftOrders <span class="token operator">=</span> <span class="token keyword">await</span> orderRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token string">&#39;DRAFT&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="specifications" tabindex="-1"><a class="header-anchor" href="#specifications"><span>Specifications</span></a></h2><p>Specifications encapsulate business rules and query logic into reusable, composable objects. They can be used for both validation and selection of domain objects.</p>`,3)),t("p",null,[p(a,{to:"/guide/core/specifications.html"},{default:o(()=>n[5]||(n[5]=[s("Learn more about Specifications")])),_:1})]),n[16]||(n[16]=e(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// Example: Finding active premium customers</span></span>
<span class="line"><span class="token keyword">const</span> ActiveCustomer <span class="token operator">=</span> <span class="token function">specification</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;ActiveCustomer&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">isSatisfiedBy</span><span class="token operator">:</span> <span class="token parameter">customer</span> <span class="token operator">=&gt;</span> customer<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">&#39;ACTIVE&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> PremiumPlan <span class="token operator">=</span> <span class="token function">specification</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;PremiumPlan&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">isSatisfiedBy</span><span class="token operator">:</span> <span class="token parameter">customer</span> <span class="token operator">=&gt;</span> customer<span class="token punctuation">.</span>plan <span class="token operator">===</span> <span class="token string">&#39;PREMIUM&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Composing specifications</span></span>
<span class="line"><span class="token keyword">const</span> ActivePremiumCustomer <span class="token operator">=</span> ActiveCustomer<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>PremiumPlan<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> premiumCustomers <span class="token operator">=</span> <span class="token keyword">await</span> customerRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>ActivePremiumCustomer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="domain-services" tabindex="-1"><a class="header-anchor" href="#domain-services"><span>Domain Services</span></a></h2><p>Domain services encapsulate operations that don&#39;t conceptually belong to any entity or value object. They&#39;re used for operations that involve multiple domain objects or more complex business logic.</p>`,3)),t("p",null,[p(a,{to:"/guide/core/domain-services.html"},{default:o(()=>n[6]||(n[6]=[s("Learn more about Domain Services")])),_:1})]),n[17]||(n[17]=e(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// Example: Payment processing service</span></span>
<span class="line"><span class="token keyword">const</span> paymentResult <span class="token operator">=</span> <span class="token keyword">await</span> paymentService<span class="token punctuation">.</span><span class="token function">processPayment</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">orderId</span><span class="token operator">:</span> order<span class="token punctuation">.</span>id<span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">amount</span><span class="token operator">:</span> order<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">paymentMethod</span><span class="token operator">:</span> customer<span class="token punctuation">.</span>preferredPaymentMethod</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="how-everything-fits-together" tabindex="-1"><a class="header-anchor" href="#how-everything-fits-together"><span>How Everything Fits Together</span></a></h2><p>In a typical domain model:</p><ol><li><strong>Value objects</strong> and <strong>entities</strong> form the building blocks of your model</li><li><strong>Aggregates</strong> group related entities and value objects into consistency boundaries</li><li><strong>Repositories</strong> store and retrieve aggregates</li><li><strong>Specifications</strong> help find the right aggregates</li><li><strong>Domain events</strong> communicate changes between aggregates</li><li><strong>Domain services</strong> coordinate operations across multiple aggregates</li></ol><p>By using these patterns together, you can build a rich, expressive domain model that captures the complexity of your business domain while keeping your code maintainable and flexible.</p><h2 id="next-steps" tabindex="-1"><a class="header-anchor" href="#next-steps"><span>Next Steps</span></a></h2>`,6)),t("p",null,[n[8]||(n[8]=s("Ready to dive deeper? Choose a concept to explore from the list above, or check out our ")),p(a,{to:"/guide/quick-start.html"},{default:o(()=>n[7]||(n[7]=[s("Quick Start Guide")])),_:1}),n[9]||(n[9]=s(" to see these concepts in action."))])])}const v=i(u,[["render",d]]),g=JSON.parse('{"path":"/guide/core/","title":"Core Domain-Driven Design Concepts","lang":"en-US","frontmatter":{},"git":{"updatedTime":1744981583000,"contributors":[{"name":"Marco Müllner","username":"","email":"muellnermarco@gmail.com","commits":1}],"changelog":[{"hash":"2ff6a46144749412c398ef011b1ce897d8b0bc48","time":1744981583000,"email":"muellnermarco@gmail.com","author":"Marco Müllner","message":"feat: add real-world analogies to domain concepts for better understanding"}]},"filePathRelative":"guide/core/index.md"}');export{v as comp,g as data};
