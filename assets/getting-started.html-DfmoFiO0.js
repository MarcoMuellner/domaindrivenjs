import{_ as l,c,a as o,b as r,w as t,r as u,o as d,d as n,e as a}from"./app-DtZquNiu.js";const k="/domaindrivenjs/images/gs_challenges.png",m="/domaindrivenjs/images/gs_decision_flow.png",v="/domaindrivenjs/images/gs_comparison.png",g={};function h(b,s){const i=u("CodeTabs");return d(),c("div",null,[s[6]||(s[6]=o('<h1 id="getting-started-with-domaindrivenjs" tabindex="-1"><a class="header-anchor" href="#getting-started-with-domaindrivenjs"><span>Getting Started with DomainDrivenJS</span></a></h1><p>Domain-Driven Design (DDD) is a powerful approach to software development, but it can be challenging to implement effectively. DomainDrivenJS makes DDD more accessible by providing a composition-based toolkit that aligns with JavaScript&#39;s strengths.</p><p><img src="'+k+'" alt="challenges"></p><h2 id="what-is-domain-driven-design" tabindex="-1"><a class="header-anchor" href="#what-is-domain-driven-design"><span>What is Domain-Driven Design?</span></a></h2><p>Domain-Driven Design is an approach to software development that:</p><ol><li><strong>Centers on the business domain</strong> - Focusing on real-world business concepts rather than technical constructs</li><li><strong>Creates a shared language</strong> - Building a common vocabulary (ubiquitous language) between developers and domain experts</li><li><strong>Emphasizes a model-driven approach</strong> - Using models to solve complex problems within bounded contexts</li><li><strong>Separates strategic and tactical patterns</strong> - Providing both high-level design tools and detailed implementation patterns</li></ol><h3 id="strategic-ddd" tabindex="-1"><a class="header-anchor" href="#strategic-ddd"><span>Strategic DDD</span></a></h3><p>Strategic DDD focuses on the big picture:</p><ul><li><strong>Bounded Contexts</strong> - Defining clear boundaries where models apply</li><li><strong>Context Maps</strong> - Understanding relationships between different bounded contexts</li><li><strong>Core Domain</strong> - Identifying the most valuable part of your business</li><li><strong>Ubiquitous Language</strong> - Developing a shared vocabulary with domain experts</li></ul><h3 id="tactical-ddd" tabindex="-1"><a class="header-anchor" href="#tactical-ddd"><span>Tactical DDD</span></a></h3><p>Tactical DDD provides implementation patterns:</p><ul><li><strong>Value Objects</strong> - Immutable objects defined by their attributes</li><li><strong>Entities</strong> - Objects with identity that can change over time</li><li><strong>Aggregates</strong> - Clusters of objects treated as a single unit</li><li><strong>Domain Events</strong> - Representing significant occurrences in the domain</li><li><strong>Repositories</strong> - Providing collection-like interfaces for aggregates</li><li><strong>Services</strong> - Encapsulating domain operations that don&#39;t belong to entities</li></ul><h2 id="when-to-use-ddd" tabindex="-1"><a class="header-anchor" href="#when-to-use-ddd"><span>When to Use DDD</span></a></h2><p><img src="'+m+'" alt="Decision Flow Chart"></p><p>Domain-Driven Design is most valuable when:</p><ul><li><strong>You&#39;re dealing with complex domains</strong> - When the business rules and processes are intricate</li><li><strong>Business logic is central to your application</strong> - When your application&#39;s value comes from solving domain problems well</li><li><strong>The application will evolve over time</strong> - When you need a model that can adapt to changing requirements</li><li><strong>Multiple stakeholders need to collaborate</strong> - When developers and domain experts must work closely together</li></ul><p>DDD might be overkill for:</p><ul><li>Simple CRUD applications</li><li>Temporary or throwaway projects</li><li>Domains that are well-understood and unlikely to change</li><li>Projects where technical complexity outweighs domain complexity</li></ul><h2 id="why-domaindrivenjs" tabindex="-1"><a class="header-anchor" href="#why-domaindrivenjs"><span>Why DomainDrivenJS?</span></a></h2><p>DomainDrivenJS brings DDD to JavaScript with a modern approach:</p><ol><li><strong>Composition over inheritance</strong> - Using functional factory patterns instead of deep class hierarchies</li><li><strong>Runtime validation with static types</strong> - Leveraging Zod for both validation and TypeScript integration</li><li><strong>Immutability by default</strong> - Ensuring predictable state management</li><li><strong>Developer experience first</strong> - Providing clear, helpful errors and minimal boilerplate</li><li><strong>Familiar JavaScript patterns</strong> - Working with the language rather than against it</li></ol><p><img src="'+v+'" alt="DomainDrivenJS"></p><h3 id="comparison-with-other-approaches" tabindex="-1"><a class="header-anchor" href="#comparison-with-other-approaches"><span>Comparison with Other Approaches</span></a></h3><table><thead><tr><th>Approach</th><th>Pros</th><th>Cons</th></tr></thead><tbody><tr><td><strong>Traditional OOP DDD</strong></td><td>Well-documented, established patterns</td><td>Can lead to rigid inheritance hierarchies, less natural in JavaScript</td></tr><tr><td><strong>Functional Programming</strong></td><td>Immutability, pure functions</td><td>Often requires learning new paradigms, less obvious mapping to domain concepts</td></tr><tr><td><strong>CQRS/Event Sourcing</strong></td><td>Audit trail, temporal queries</td><td>Added complexity, eventual consistency challenges</td></tr><tr><td><strong>Anemic Domain Model</strong></td><td>Simplicity, familiar to many developers</td><td>Business logic spread across services, harder to enforce invariants</td></tr><tr><td><strong>DomainDrivenJS</strong></td><td>Combines best practices, natural in JS, type-safe</td><td>New library, evolving patterns</td></tr></tbody></table><h2 id="installation" tabindex="-1"><a class="header-anchor" href="#installation"><span>Installation</span></a></h2>',25)),r(i,{id:"273",data:[{id:"npm"},{id:"yarn"},{id:"pnpm"}]},{title0:t(({value:e,isActive:p})=>s[0]||(s[0]=[a("npm")])),title1:t(({value:e,isActive:p})=>s[1]||(s[1]=[a("yarn")])),title2:t(({value:e,isActive:p})=>s[2]||(s[2]=[a("pnpm")])),tab0:t(({value:e,isActive:p})=>s[3]||(s[3]=[n("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token function"},"npm"),a(),n("span",{class:"token function"},"install"),a(" domaindrivenjs")]),a(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"})])],-1)])),tab1:t(({value:e,isActive:p})=>s[4]||(s[4]=[n("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token function"},"yarn"),a(),n("span",{class:"token function"},"add"),a(" domaindrivenjs")]),a(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"})])],-1)])),tab2:t(({value:e,isActive:p})=>s[5]||(s[5]=[n("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token function"},"pnpm"),a(),n("span",{class:"token function"},"add"),a(" domaindrivenjs")]),a(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"})])],-1)])),_:1}),s[7]||(s[7]=o(`<h2 id="basic-concepts" tabindex="-1"><a class="header-anchor" href="#basic-concepts"><span>Basic Concepts</span></a></h2><p>Here&#39;s a quick overview of the core building blocks in DomainDrivenJS:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> z <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;zod&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> valueObject<span class="token punctuation">,</span> entity<span class="token punctuation">,</span> aggregate <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;domaindrivenjs&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 1. Value Objects - immutable objects defined by their attributes</span></span>
<span class="line"><span class="token keyword">const</span> Money <span class="token operator">=</span> <span class="token function">valueObject</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Money&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">schema</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">amount</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nonnegative</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">currency</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">methodsFactory</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">MoneyFactory</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">other</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>currency <span class="token operator">!==</span> other<span class="token punctuation">.</span>currency<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Cannot add different currencies&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">return</span> MoneyFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span> </span>
<span class="line">        <span class="token literal-property property">amount</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>amount <span class="token operator">+</span> other<span class="token punctuation">.</span>amount<span class="token punctuation">,</span> </span>
<span class="line">        <span class="token literal-property property">currency</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>currency </span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. Entities - objects with identity that can change over time</span></span>
<span class="line"><span class="token keyword">const</span> Product <span class="token operator">=</span> <span class="token function">entity</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Product&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">schema</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">id</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">price</span><span class="token operator">:</span> Money<span class="token punctuation">.</span>schema<span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">stockLevel</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nonnegative</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">identity</span><span class="token operator">:</span> <span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">methodsFactory</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">ProductFactory</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">decreaseStock</span><span class="token punctuation">(</span><span class="token parameter">quantity</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>quantity <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stockLevel<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Not enough stock&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">return</span> ProductFactory<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">stockLevel</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stockLevel <span class="token operator">-</span> quantity</span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 3. Aggregates - clusters of objects treated as a single unit</span></span>
<span class="line"><span class="token keyword">const</span> Order <span class="token operator">=</span> <span class="token function">aggregate</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Order&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">schema</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">id</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">customerId</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">items</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span>z<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">productId</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">quantity</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">positive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">unitPrice</span><span class="token operator">:</span> Money<span class="token punctuation">.</span>schema</span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">status</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">enum</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;DRAFT&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;PLACED&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;PAID&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;SHIPPED&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;COMPLETED&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;CANCELLED&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">identity</span><span class="token operator">:</span> <span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">invariants</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Order must have items when placed&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token function-variable function">check</span><span class="token operator">:</span> <span class="token parameter">order</span> <span class="token operator">=&gt;</span> order<span class="token punctuation">.</span>status <span class="token operator">!==</span> <span class="token string">&#39;PLACED&#39;</span> <span class="token operator">||</span> order<span class="token punctuation">.</span>items<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">methodsFactory</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">OrderFactory</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">addItem</span><span class="token punctuation">(</span><span class="token parameter">product<span class="token punctuation">,</span> quantity</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// Implementation...</span></span>
<span class="line">      <span class="token keyword">return</span> OrderFactory<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token comment">/* updates */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">placeOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> OrderFactory<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token string">&#39;PLACED&#39;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">emitEvent</span><span class="token punctuation">(</span><span class="token string">&#39;OrderPlaced&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">orderId</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">customerId</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>customerId<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">timestamp</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="next-steps" tabindex="-1"><a class="header-anchor" href="#next-steps"><span>Next Steps</span></a></h2><p>Now that you understand what DDD and DomainDrivenJS are about:</p><ol><li>Check out the <a href="/guide/quick-start.html" target="_blank" rel="noopener noreferrer">Quick Start guide</a> to build your first domain model</li><li>Learn more about <a href="/guide/ddd/" target="_blank" rel="noopener noreferrer">DDD fundamentals</a> to understand the key concepts</li><li>Explore <a href="/examples/" target="_blank" rel="noopener noreferrer">example applications</a> to see DomainDrivenJS in action</li></ol><p>Or dive straight into core concepts:</p><ul><li><a href="/guide/core/value-objects.html" target="_blank" rel="noopener noreferrer">Value Objects</a></li><li><a href="/guide/core/entities.html" target="_blank" rel="noopener noreferrer">Entities</a></li><li><a href="/guide/core/aggregates.html" target="_blank" rel="noopener noreferrer">Aggregates</a></li><li><a href="/guide/core/domain-events.html" target="_blank" rel="noopener noreferrer">Domain Events</a></li></ul>`,8))])}const f=l(g,[["render",h]]),D=JSON.parse('{"path":"/guide/getting-started.html","title":"Getting Started with DomainDrivenJS","lang":"en-US","frontmatter":{},"git":{"updatedTime":1745314373000,"contributors":[{"name":"Marco Müllner","username":"","email":"muellnermarco@gmail.com","commits":1}],"changelog":[{"hash":"f33108869e46aede69a5ee16c04def52d302b17a","time":1745314373000,"email":"muellnermarco@gmail.com","author":"Marco Müllner","message":"feat: refactor method and operation definitions to use factory functions for improved flexibility"}]},"filePathRelative":"guide/getting-started.md"}');export{f as comp,D as data};
