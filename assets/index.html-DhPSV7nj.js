import{_ as l,c as r,a as o,b as c,w as e,r as u,o as d,d as n,e as s}from"./app-BR1hGEJk.js";const m={};function k(v,a){const i=u("CodeTabs");return d(),r("div",null,[a[6]||(a[6]=o(`<h2 id="what-is-domain-driven-design" tabindex="-1"><a class="header-anchor" href="#what-is-domain-driven-design"><span>What is Domain-Driven Design?</span></a></h2><p>Domain-Driven Design (DDD) is an approach to software development that focuses on creating a model that reflects your business domain. It gives you tools to tackle complex business logic and build maintainable software that closely aligns with business needs.</p><p>With DDD, you&#39;ll:</p><ul><li>Build a <strong>shared language</strong> between developers and domain experts</li><li>Create a <strong>flexible model</strong> that evolves with your understanding</li><li>Focus development efforts on the <strong>core domain</strong> that provides the most value</li><li>Establish clear <strong>boundaries</strong> within a complex system</li></ul><h2 id="why-domaindrivenjs" tabindex="-1"><a class="header-anchor" href="#why-domaindrivenjs"><span>Why DomainDrivenJS?</span></a></h2><p>Traditional DDD implementations often rely heavily on class inheritance, which can lead to rigid and complex hierarchies. DomainDrivenJS takes a different approach:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// Create a Money value object using composition</span></span>
<span class="line"><span class="token keyword">const</span> Money <span class="token operator">=</span> <span class="token function">valueObject</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Money&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">schema</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">amount</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nonnegative</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">currency</span><span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">other</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>currency <span class="token operator">!==</span> other<span class="token punctuation">.</span>currency<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Cannot add different currencies&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">return</span> Money<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span> </span>
<span class="line">        <span class="token literal-property property">amount</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>amount <span class="token operator">+</span> other<span class="token punctuation">.</span>amount<span class="token punctuation">,</span> </span>
<span class="line">        <span class="token literal-property property">currency</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>currency </span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Use the value object in your domain</span></span>
<span class="line"><span class="token keyword">const</span> price <span class="token operator">=</span> Money<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">amount</span><span class="token operator">:</span> <span class="token number">10.99</span><span class="token punctuation">,</span> <span class="token literal-property property">currency</span><span class="token operator">:</span> <span class="token string">&#39;USD&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> tax <span class="token operator">=</span> Money<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">amount</span><span class="token operator">:</span> <span class="token number">0.55</span><span class="token punctuation">,</span> <span class="token literal-property property">currency</span><span class="token operator">:</span> <span class="token string">&#39;USD&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> total <span class="token operator">=</span> price<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tax<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Returns a new Money instance</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="getting-started" tabindex="-1"><a class="header-anchor" href="#getting-started"><span>Getting Started</span></a></h2><p>DomainDrivenJS makes it easy to implement DDD in your JavaScript projects:</p>`,9)),c(i,{id:"45",data:[{id:"npm"},{id:"yarn"},{id:"pnpm"}]},{title0:e(({value:t,isActive:p})=>a[0]||(a[0]=[s("npm")])),title1:e(({value:t,isActive:p})=>a[1]||(a[1]=[s("yarn")])),title2:e(({value:t,isActive:p})=>a[2]||(a[2]=[s("pnpm")])),tab0:e(({value:t,isActive:p})=>a[3]||(a[3]=[n("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token function"},"npm"),s(),n("span",{class:"token function"},"install"),s(" domaindrivenjs")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"})])],-1)])),tab1:e(({value:t,isActive:p})=>a[4]||(a[4]=[n("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token function"},"yarn"),s(),n("span",{class:"token function"},"add"),s(" domaindrivenjs")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"})])],-1)])),tab2:e(({value:t,isActive:p})=>a[5]||(a[5]=[n("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token function"},"pnpm"),s(),n("span",{class:"token function"},"add"),s(" domaindrivenjs")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"})])],-1)])),_:1}),a[7]||(a[7]=o('<h2 id="learning-path" tabindex="-1"><a class="header-anchor" href="#learning-path"><span>Learning Path</span></a></h2><p><strong>New to DDD?</strong> Start with <a href="/guide/ddd/" target="_blank" rel="noopener noreferrer">DDD Fundamentals</a> to learn the core concepts.</p><p><strong>Ready to code?</strong> The <a href="/guide/quick-start.html" target="_blank" rel="noopener noreferrer">Quick Start</a> will get you building immediately.</p><p><strong>Looking for examples?</strong> Check out complete applications in our <a href="/examples/" target="_blank" rel="noopener noreferrer">Examples</a> section.</p><p><strong>Need specific guidance?</strong> Dive into our comprehensive <a href="/api/" target="_blank" rel="noopener noreferrer">API Reference</a>.</p>',5))])}const g=l(m,[["render",k]]),b=JSON.parse('{"path":"/","title":"","lang":"en-US","frontmatter":{"home":true,"heroImage":"/images/logo.svg","heroText":"DomainDrivenJS","tagline":"A modern, composition-based approach to Domain-Driven Design in JavaScript","actions":[{"text":"Get Started","link":"/guide/getting-started.html","type":"primary"},{"text":"View on GitHub","link":"https://github.com/MarcoMuellner/DomainDrivenJS","type":"secondary"}],"features":[{"title":"Composition Over Inheritance","details":"Build domain models through functional composition patterns that are natural in JavaScript, rather than deep class hierarchies."},{"title":"Type-Safe with Runtime Validation","details":"Leverage Zod schemas for both compile-time type inference and runtime validation to ensure your domain objects are always valid."},{"title":"Immutable by Design","details":"All domain objects are immutable, preventing unexpected state changes and making your code more predictable and easier to reason about."},{"title":"Domain Events Built-In","details":"First-class support for domain events, enabling loosely coupled, event-driven architectures that accurately model business processes."},{"title":"Framework Agnostic","details":"Works with any JavaScript or TypeScript project regardless of framework, allowing you to focus on modeling your domain."},{"title":"Developer Experience First","details":"Clear error messages, minimal boilerplate, and intuitive APIs designed to make DDD approachable and practical."}],"footer":"MIT Licensed | Copyright © 2023-present Marco Müllner"},"git":{"updatedTime":1744915094000,"contributors":[{"name":"Marco Müllner","username":"","email":"muellnermarco@gmail.com","commits":1}],"changelog":[{"hash":"44da9318d3a8f92dc0163b89484d222abe023391","time":1744915094000,"email":"muellnermarco@gmail.com","author":"Marco Müllner","message":"feat: rename project from Domainify to DomainDrivenJS; update references and documentation accordingly"}]},"filePathRelative":"README.md"}');export{g as comp,b as data};
